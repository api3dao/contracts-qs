{
  "address": "0xF930D1E37098128326F8731a476347f0840337cA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControlRegistry_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "adminRoleDescription_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "manager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "api3ServerV1_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dappId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "updater",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "signedDataTimestampCutoff",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "auctioneer",
          "type": "address"
        }
      ],
      "name": "PaidOevBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconSetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "UpdatedBeaconSetWithBeacons",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "UpdatedBeaconWithSignedData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dappId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "updater",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int224",
          "name": "updatedValue",
          "type": "int224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "updatedTimestamp",
          "type": "uint32"
        }
      ],
      "name": "UpdatedDappOevDataFeed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Withdrew",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUCTIONEER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminRoleDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "api3ServerV1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctioneerRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "containsBytecode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dappIdToLastPaidBid",
      "outputs": [
        {
          "internalType": "address",
          "name": "updater",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "signedDataTimestampCutoff",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockBasefee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "returndata",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dappId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "oevDataFeed",
      "outputs": [
        {
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dappId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "signedDataTimestampCutoff",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "payOevBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dappId",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "signedData",
          "type": "bytes[]"
        }
      ],
      "name": "simulateDappOevDataFeedUpdate",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "baseDataFeedId",
          "type": "bytes32"
        },
        {
          "internalType": "int224",
          "name": "updatedValue",
          "type": "int224"
        },
        {
          "internalType": "uint32",
          "name": "updatedTimestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "simulateExternalCall",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "tryMulticall",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "successes",
          "type": "bool[]"
        },
        {
          "internalType": "bytes[]",
          "name": "returndata",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "beaconIds",
          "type": "bytes32[]"
        }
      ],
      "name": "updateBeaconSetWithBeacons",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "beaconSetId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dappId",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "signedData",
          "type": "bytes[]"
        }
      ],
      "name": "updateDappOevDataFeed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "baseDataFeedId",
          "type": "bytes32"
        },
        {
          "internalType": "int224",
          "name": "updatedValue",
          "type": "int224"
        },
        {
          "internalType": "uint32",
          "name": "updatedTimestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawerRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x74a697577ea3664078e4613cc803a91f7517d69526cc571e4f71106b35422ac6",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x07b589f06bD0A5324c4E2376d66d2F4F25921DE1",
    "contractAddress": null,
    "transactionIndex": 65,
    "gasUsed": "3107759",
    "logsBloom": "0x
    "blockHash": "0x1aef135ef4edfaf3dfa7be3b27549a9fca28490721ab1e56faa806aa3b47241b",
    "transactionHash": "0x74a697577ea3664078e4613cc803a91f7517d69526cc571e4f71106b35422ac6",
    "logs": [],
    "blockNumber": 19933160,
    "cumulativeGasUsed": "8793661",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcD7Df573B0F0bb4F2f8dFFF6650cDe8C77431730",
    "Api3ServerV1OevExtension admin",
    "0x81bc85f329cDB28936FbB239f734AE495121F9A6",
    "0x709944a48cAf83535e43471680fDA4905FB3920a"
  ],
  "numDeployments": 1,
  "solcInputHash": "b4ca7b8450ba8a05b37d5646958c962a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControlRegistry_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"adminRoleDescription_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"manager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"api3ServerV1_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dappId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"signedDataTimestampCutoff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auctioneer\",\"type\":\"address\"}],\"name\":\"PaidOevBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconSetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatedBeaconSetWithBeacons\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatedBeaconWithSignedData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dappId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int224\",\"name\":\"updatedValue\",\"type\":\"int224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"updatedTimestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatedDappOevDataFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUCTIONEER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminRoleDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"api3ServerV1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctioneerRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"containsBytecode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dappIdToLastPaidBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"signedDataTimestampCutoff\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockBasefee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returndata\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dappId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"oevDataFeed\",\"outputs\":[{\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dappId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"signedDataTimestampCutoff\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"payOevBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dappId\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signedData\",\"type\":\"bytes[]\"}],\"name\":\"simulateDappOevDataFeedUpdate\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"baseDataFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"int224\",\"name\":\"updatedValue\",\"type\":\"int224\"},{\"internalType\":\"uint32\",\"name\":\"updatedTimestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"simulateExternalCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"tryMulticall\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"successes\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"returndata\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"beaconIds\",\"type\":\"bytes32[]\"}],\"name\":\"updateBeaconSetWithBeacons\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconSetId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dappId\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signedData\",\"type\":\"bytes[]\"}],\"name\":\"updateDappOevDataFeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"baseDataFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"int224\",\"name\":\"updatedValue\",\"type\":\"int224\"},{\"internalType\":\"uint32\",\"name\":\"updatedTimestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawerRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"accessControlRegistry_\":\"AccessControlRegistry contract address\",\"adminRoleDescription_\":\"Admin role description\",\"api3ServerV1_\":\"Api3ServerV1 address\",\"manager_\":\"Manager address\"}},\"containsBytecode(address)\":{\"details\":\"An account not containing any bytecode does not indicate that it is an EOA or it will not contain any bytecode in the future. Contract construction and `SELFDESTRUCT` updates the bytecode at the end of the transaction.\",\"returns\":{\"_0\":\"If the account contains bytecode\"}},\"getBalance(address)\":{\"params\":{\"account\":\"Account address\"},\"returns\":{\"_0\":\"Account balance\"}},\"getBlockBasefee()\":{\"returns\":{\"_0\":\"Current block basefee\"}},\"getBlockNumber()\":{\"returns\":{\"_0\":\"Current block number\"}},\"getBlockTimestamp()\":{\"returns\":{\"_0\":\"Current block timestamp\"}},\"getChainId()\":{\"returns\":{\"_0\":\"Chain ID\"}},\"multicall(bytes[])\":{\"params\":{\"data\":\"Array of calldata of batched calls\"},\"returns\":{\"returndata\":\"Array of returndata of batched calls\"}},\"oevDataFeed(uint256,bytes32)\":{\"params\":{\"dappId\":\"dApp ID\",\"dataFeedId\":\"Data feed ID\"},\"returns\":{\"timestamp\":\"Data feed timestamp\",\"value\":\"Data feed value\"}},\"payOevBid(uint256,uint32,bytes)\":{\"params\":{\"dappId\":\"dApp ID\",\"signature\":\"Signature provided by an auctioneer\",\"signedDataTimestampCutoff\":\"Signed data timestamp cut-off\"}},\"simulateDappOevDataFeedUpdate(uint256,bytes[])\":{\"details\":\"The intended flow is for a searcher to do a static multicall to this function and `simulateExternalCall()` to check if the current signed data lets them extract OEV. If so, the searcher stores this data and places a bid on OevAuctionHouse. If they win the auction, they pay the bid and use the stored signed data with `updateDappOevDataFeed()` to extract OEV.\",\"params\":{\"dappId\":\"dApp ID\",\"signedData\":\"Signed data (see `_updateDappOevDataFeed()` for details)\"},\"returns\":{\"baseDataFeedId\":\"Base data feed ID\",\"updatedTimestamp\":\"Updated timestamp\",\"updatedValue\":\"Updated value\"}},\"simulateExternalCall(address,bytes)\":{\"details\":\"The most basic usage of this is in a static multicall that calls `simulateDappOevDataFeedUpdate()` multiple times to update the relevant feeds, followed by an external call to the liquidator contract of the searcher, which is built to return the revenue from the liquidation. The returned value would then be used to determine the bid amount.\",\"params\":{\"data\":\"Calldata of the external call\",\"target\":\"Target address of the external call\"},\"returns\":{\"_0\":\"Returndata of the external call\"}},\"tryMulticall(bytes[])\":{\"params\":{\"data\":\"Array of calldata of batched calls\"},\"returns\":{\"returndata\":\"Array of returndata of batched calls\",\"successes\":\"Array of success conditions of batched calls\"}},\"updateBeaconSetWithBeacons(bytes32[])\":{\"details\":\"As an oddity, this function still works if some of the IDs in `beaconIds` belong to Beacon sets rather than Beacons. This can be used to implement hierarchical Beacon sets.\",\"params\":{\"beaconIds\":\"Beacon IDs\"},\"returns\":{\"beaconSetId\":\"Beacon set ID\"}},\"updateDappOevDataFeed(uint256,bytes[])\":{\"params\":{\"dappId\":\"dApp ID\",\"signedData\":\"Signed data (see `_updateDappOevDataFeed()` for details)\"},\"returns\":{\"baseDataFeedId\":\"Base data feed ID\",\"updatedTimestamp\":\"Updated timestamp\",\"updatedValue\":\"Updated value\"}},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"Amount\",\"recipient\":\"Recipient address\"}}},\"title\":\"Api3ServerV1 extension for OEV support\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"AUCTIONEER_ROLE_DESCRIPTION()\":{\"notice\":\"Auctioneer role description\"},\"WITHDRAWER_ROLE_DESCRIPTION()\":{\"notice\":\"Withdrawer role description\"},\"accessControlRegistry()\":{\"notice\":\"AccessControlRegistry contract address\"},\"adminRole()\":{\"notice\":\"Admin role\"},\"adminRoleDescription()\":{\"notice\":\"Admin role description\"},\"api3ServerV1()\":{\"notice\":\"Api3ServerV1 contract address\"},\"auctioneerRole()\":{\"notice\":\"Auctioneer role\"},\"containsBytecode(address)\":{\"notice\":\"Returns if the account contains bytecode\"},\"dappIdToLastPaidBid(uint256)\":{\"notice\":\"Returns the parameters of the last paid bid for the dApp with ID\"},\"getBalance(address)\":{\"notice\":\"Returns the account balance\"},\"getBlockBasefee()\":{\"notice\":\"Returns the current block basefee\"},\"getBlockNumber()\":{\"notice\":\"Returns the current block number\"},\"getBlockTimestamp()\":{\"notice\":\"Returns the current block timestamp\"},\"getChainId()\":{\"notice\":\"Returns the chain ID\"},\"manager()\":{\"notice\":\"Address of the manager that manages the related AccessControlRegistry roles\"},\"multicall(bytes[])\":{\"notice\":\"Batches calls to the inheriting contract and reverts as soon as one of the batched calls reverts\"},\"oevDataFeed(uint256,bytes32)\":{\"notice\":\"Value of the OEV data feed specific to the dApp, intended for informational purposes. The dApps are strongly recommended to use the standardized proxies to read data feeds.\"},\"payOevBid(uint256,uint32,bytes)\":{\"notice\":\"An OEV auction bid specifies a dApp ID, a signed data timestamp cut-off, a bid amount and an updater account. To award the winning bid, an auctioneer signs a message that includes the hash of these parameters and publishes it. Then, the updater account calls this function to pay the bid amount and claim the privilege to execute updates for the dApp with ID using the signed data whose timestamps are limited by the cut-off.\"},\"simulateDappOevDataFeedUpdate(uint256,bytes[])\":{\"notice\":\"Called by the zero address to simulate an OEV data feed update\"},\"simulateExternalCall(address,bytes)\":{\"notice\":\"Called by the zero address to simulate an external call\"},\"tryMulticall(bytes[])\":{\"notice\":\"Batches calls to the inheriting contract but does not revert if any of the batched calls reverts\"},\"updateBeaconSetWithBeacons(bytes32[])\":{\"notice\":\"Updates the Beacon set using the current values of its Beacons\"},\"updateDappOevDataFeed(uint256,bytes[])\":{\"notice\":\"Called by the current updater of the dApp with ID to update the OEV data feed specific to the dApp\"},\"withdraw(address,uint256)\":{\"notice\":\"Called by the contract manager or a withdrawer to withdraw the accumulated OEV auction proceeds\"},\"withdrawerRole()\":{\"notice\":\"Withdrawer role\"}},\"notice\":\"Api3ServerV1 contract supports base data feeds and OEV functionality. This contract implements the updated OEV design, and thus supersedes the OEV-related portion of Api3ServerV1. As before, the users are intended to read API3 data feeds through a standardized proxy, which abstracts this change away.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/api3-server-v1/Api3ServerV1OevExtension.sol\":\"Api3ServerV1OevExtension\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/access/AccessControlRegistryAdminned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/SelfMulticall.sol\\\";\\nimport \\\"./RoleDeriver.sol\\\";\\nimport \\\"./interfaces/IAccessControlRegistryAdminned.sol\\\";\\nimport \\\"./interfaces/IAccessControlRegistry.sol\\\";\\n\\n/// @title Contract to be inherited by contracts whose adminship functionality\\n/// will be implemented using AccessControlRegistry\\ncontract AccessControlRegistryAdminned is\\n    SelfMulticall,\\n    RoleDeriver,\\n    IAccessControlRegistryAdminned\\n{\\n    /// @notice AccessControlRegistry contract address\\n    address public immutable override accessControlRegistry;\\n\\n    /// @notice Admin role description\\n    string public override adminRoleDescription;\\n\\n    bytes32 internal immutable adminRoleDescriptionHash;\\n\\n    /// @dev Contracts deployed with the same admin role descriptions will have\\n    /// the same roles, meaning that granting an account a role will authorize\\n    /// it in multiple contracts. Unless you want your deployed contract to\\n    /// share the role configuration of another contract, use a unique admin\\n    /// role description.\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription\\n    ) {\\n        require(_accessControlRegistry != address(0), \\\"ACR address zero\\\");\\n        require(\\n            bytes(_adminRoleDescription).length > 0,\\n            \\\"Admin role description empty\\\"\\n        );\\n        accessControlRegistry = _accessControlRegistry;\\n        adminRoleDescription = _adminRoleDescription;\\n        adminRoleDescriptionHash = keccak256(\\n            abi.encodePacked(_adminRoleDescription)\\n        );\\n    }\\n\\n    /// @notice Derives the admin role for the specific manager address\\n    /// @param manager Manager address\\n    /// @return adminRole Admin role\\n    function _deriveAdminRole(\\n        address manager\\n    ) internal view returns (bytes32 adminRole) {\\n        adminRole = _deriveRole(\\n            _deriveRootRole(manager),\\n            adminRoleDescriptionHash\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x813755d99a9d8dd6298720da68fb5a6dd69329ea2dec91da1d09f715d4543c15\",\"license\":\"MIT\"},\"contracts/access/AccessControlRegistryAdminnedWithManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControlRegistryAdminned.sol\\\";\\nimport \\\"./interfaces/IAccessControlRegistryAdminnedWithManager.sol\\\";\\n\\n/// @title Contract to be inherited by contracts with manager whose adminship\\n/// functionality will be implemented using AccessControlRegistry\\n/// @notice The manager address here is expected to belong to an\\n/// AccessControlRegistry user that is a multisig/DAO\\ncontract AccessControlRegistryAdminnedWithManager is\\n    AccessControlRegistryAdminned,\\n    IAccessControlRegistryAdminnedWithManager\\n{\\n    /// @notice Address of the manager that manages the related\\n    /// AccessControlRegistry roles\\n    /// @dev The mutability of the manager role can be implemented by\\n    /// designating an OwnableCallForwarder contract as the manager. The\\n    /// ownership of this contract can then be transferred, effectively\\n    /// transferring managership.\\n    address public immutable override manager;\\n\\n    /// @notice Admin role\\n    /// @dev Since `manager` is immutable, so is `adminRole`\\n    bytes32 public immutable override adminRole;\\n\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    /// @param _manager Manager address\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription,\\n        address _manager\\n    )\\n        AccessControlRegistryAdminned(\\n            _accessControlRegistry,\\n            _adminRoleDescription\\n        )\\n    {\\n        require(_manager != address(0), \\\"Manager address zero\\\");\\n        manager = _manager;\\n        adminRole = _deriveAdminRole(_manager);\\n    }\\n}\\n\",\"keccak256\":\"0xbe5df884327dd7d4e236c105b6ef52cc6db20b452f4cdbe6c50fa506ed66cace\",\"license\":\"MIT\"},\"contracts/access/RoleDeriver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contract to be inherited by contracts that will derive\\n/// AccessControlRegistry roles\\n/// @notice If a contract interfaces with AccessControlRegistry and needs to\\n/// derive roles, it should inherit this contract instead of re-implementing\\n/// the logic\\ncontract RoleDeriver {\\n    /// @notice Derives the root role of the manager\\n    /// @param manager Manager address\\n    /// @return rootRole Root role\\n    function _deriveRootRole(\\n        address manager\\n    ) internal pure returns (bytes32 rootRole) {\\n        rootRole = keccak256(abi.encodePacked(manager));\\n    }\\n\\n    /// @notice Derives the role using its admin role and description\\n    /// @dev This implies that roles adminned by the same role cannot have the\\n    /// same description\\n    /// @param adminRole Admin role\\n    /// @param description Human-readable description of the role\\n    /// @return role Role\\n    function _deriveRole(\\n        bytes32 adminRole,\\n        string memory description\\n    ) internal pure returns (bytes32 role) {\\n        role = _deriveRole(adminRole, keccak256(abi.encodePacked(description)));\\n    }\\n\\n    /// @notice Derives the role using its admin role and description hash\\n    /// @dev This implies that roles adminned by the same role cannot have the\\n    /// same description\\n    /// @param adminRole Admin role\\n    /// @param descriptionHash Hash of the human-readable description of the\\n    /// role\\n    /// @return role Role\\n    function _deriveRole(\\n        bytes32 adminRole,\\n        bytes32 descriptionHash\\n    ) internal pure returns (bytes32 role) {\\n        role = keccak256(abi.encodePacked(adminRole, descriptionHash));\\n    }\\n}\\n\",\"keccak256\":\"0x488adb3cb7031415d4a195230753a0ac8f9f610e6db7a571529a350e29c97ed6\",\"license\":\"MIT\"},\"contracts/access/interfaces/IAccessControlRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../vendor/@openzeppelin/contracts@4.8.2/access/IAccessControl.sol\\\";\\nimport \\\"../../utils/interfaces/ISelfMulticall.sol\\\";\\n\\ninterface IAccessControlRegistry is IAccessControl, ISelfMulticall {\\n    event InitializedManager(\\n        bytes32 indexed rootRole,\\n        address indexed manager,\\n        address sender\\n    );\\n\\n    event InitializedRole(\\n        bytes32 indexed role,\\n        bytes32 indexed adminRole,\\n        string description,\\n        address sender\\n    );\\n\\n    function initializeManager(address manager) external;\\n\\n    function initializeRoleAndGrantToSender(\\n        bytes32 adminRole,\\n        string calldata description\\n    ) external returns (bytes32 role);\\n}\\n\",\"keccak256\":\"0x87066db894a24118df39a557d00c0a6529c39196011c03f809ca8cce1644e027\",\"license\":\"MIT\"},\"contracts/access/interfaces/IAccessControlRegistryAdminned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/interfaces/ISelfMulticall.sol\\\";\\n\\ninterface IAccessControlRegistryAdminned is ISelfMulticall {\\n    function accessControlRegistry() external view returns (address);\\n\\n    function adminRoleDescription() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd71aae2566c019a9b2da5e1ec51421a62898495fa6fd08e2cc39451511dda334\",\"license\":\"MIT\"},\"contracts/access/interfaces/IAccessControlRegistryAdminnedWithManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlRegistryAdminned.sol\\\";\\n\\ninterface IAccessControlRegistryAdminnedWithManager is\\n    IAccessControlRegistryAdminned\\n{\\n    function manager() external view returns (address);\\n\\n    function adminRole() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x8a8e1756fca81175305755b7a311536132e88173f60b2ac0fdeef92a6236afc5\",\"license\":\"MIT\"},\"contracts/api3-server-v1/Api3ServerV1OevExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../access/AccessControlRegistryAdminnedWithManager.sol\\\";\\nimport \\\"./DataFeedServer.sol\\\";\\nimport \\\"./interfaces/IApi3ServerV1OevExtension.sol\\\";\\nimport \\\"../vendor/@openzeppelin/contracts@4.8.2/utils/Address.sol\\\";\\nimport \\\"../vendor/@openzeppelin/contracts@4.8.2/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./interfaces/IApi3ServerV1.sol\\\";\\n\\n/// @title Api3ServerV1 extension for OEV support\\n/// @notice Api3ServerV1 contract supports base data feeds and OEV\\n/// functionality. This contract implements the updated OEV design, and thus\\n/// supersedes the OEV-related portion of Api3ServerV1. As before, the users\\n/// are intended to read API3 data feeds through a standardized proxy, which\\n/// abstracts this change away.\\ncontract Api3ServerV1OevExtension is\\n    AccessControlRegistryAdminnedWithManager,\\n    DataFeedServer,\\n    IApi3ServerV1OevExtension\\n{\\n    using ECDSA for bytes32;\\n\\n    struct LastPaidBid {\\n        address updater;\\n        uint32 signedDataTimestampCutoff;\\n    }\\n\\n    /// @notice Withdrawer role description\\n    string public constant override WITHDRAWER_ROLE_DESCRIPTION = \\\"Withdrawer\\\";\\n\\n    /// @notice Auctioneer role description\\n    string public constant override AUCTIONEER_ROLE_DESCRIPTION = \\\"Auctioneer\\\";\\n\\n    /// @notice Withdrawer role\\n    bytes32 public immutable override withdrawerRole;\\n\\n    /// @notice Auctioneer role\\n    bytes32 public immutable override auctioneerRole;\\n\\n    /// @notice Api3ServerV1 contract address\\n    address public immutable override api3ServerV1;\\n\\n    /// @notice Returns the parameters of the last paid bid for the dApp with\\n    /// ID\\n    mapping(uint256 => LastPaidBid) public override dappIdToLastPaidBid;\\n\\n    /// @param accessControlRegistry_ AccessControlRegistry contract address\\n    /// @param adminRoleDescription_ Admin role description\\n    /// @param manager_ Manager address\\n    /// @param api3ServerV1_ Api3ServerV1 address\\n    constructor(\\n        address accessControlRegistry_,\\n        string memory adminRoleDescription_,\\n        address manager_,\\n        address api3ServerV1_\\n    )\\n        AccessControlRegistryAdminnedWithManager(\\n            accessControlRegistry_,\\n            adminRoleDescription_,\\n            manager_\\n        )\\n    {\\n        require(api3ServerV1_ != address(0), \\\"Api3ServerV1 address zero\\\");\\n        api3ServerV1 = api3ServerV1_;\\n        withdrawerRole = _deriveRole(\\n            _deriveAdminRole(manager_),\\n            WITHDRAWER_ROLE_DESCRIPTION\\n        );\\n        auctioneerRole = _deriveRole(\\n            _deriveAdminRole(manager_),\\n            AUCTIONEER_ROLE_DESCRIPTION\\n        );\\n    }\\n\\n    /// @notice Called by the contract manager or a withdrawer to withdraw the\\n    /// accumulated OEV auction proceeds\\n    /// @param recipient Recipient address\\n    /// @param amount Amount\\n    function withdraw(address recipient, uint256 amount) external override {\\n        require(recipient != address(0), \\\"Recipient address zero\\\");\\n        require(amount != 0, \\\"Amount zero\\\");\\n        require(\\n            msg.sender == manager ||\\n                IAccessControlRegistry(accessControlRegistry).hasRole(\\n                    withdrawerRole,\\n                    msg.sender\\n                ),\\n            \\\"Sender cannot withdraw\\\"\\n        );\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Withdrawal reverted\\\");\\n        emit Withdrew(recipient, amount, msg.sender);\\n    }\\n\\n    /// @notice An OEV auction bid specifies a dApp ID, a signed data timestamp\\n    /// cut-off, a bid amount and an updater account. To award the winning bid,\\n    /// an auctioneer signs a message that includes the hash of these\\n    /// parameters and publishes it. Then, the updater account calls this\\n    /// function to pay the bid amount and claim the privilege to execute\\n    /// updates for the dApp with ID using the signed data whose timestamps are\\n    /// limited by the cut-off.\\n    /// @param dappId dApp ID\\n    /// @param signedDataTimestampCutoff Signed data timestamp cut-off\\n    /// @param signature Signature provided by an auctioneer\\n    function payOevBid(\\n        uint256 dappId,\\n        uint32 signedDataTimestampCutoff,\\n        bytes calldata signature\\n    ) external payable override {\\n        require(dappId != 0, \\\"dApp ID zero\\\");\\n        require(signedDataTimestampCutoff != 0, \\\"Cut-off zero\\\");\\n        // It is intended for the auction periods to be in the order of a\\n        // minute. To prevent erroneously large cut-off timestamps from causing\\n        // an irreversible state change to the contract, we do not allow\\n        // cut-off values that are too far in the future.\\n        require(\\n            signedDataTimestampCutoff < block.timestamp + 1 hours,\\n            \\\"Cut-off too far in the future\\\"\\n        );\\n        address auctioneer = (\\n            keccak256(\\n                abi.encodePacked(\\n                    block.chainid,\\n                    dappId,\\n                    msg.sender,\\n                    msg.value,\\n                    signedDataTimestampCutoff\\n                )\\n            ).toEthSignedMessageHash()\\n        ).recover(signature);\\n        require(\\n            IAccessControlRegistry(accessControlRegistry).hasRole(\\n                auctioneerRole,\\n                auctioneer\\n            ),\\n            \\\"Signature mismatch\\\"\\n        );\\n        require(\\n            dappIdToLastPaidBid[dappId].signedDataTimestampCutoff <\\n                signedDataTimestampCutoff,\\n            \\\"Cut-off not more recent\\\"\\n        );\\n        dappIdToLastPaidBid[dappId] = LastPaidBid({\\n            updater: msg.sender,\\n            signedDataTimestampCutoff: signedDataTimestampCutoff\\n        });\\n        emit PaidOevBid(\\n            dappId,\\n            msg.sender,\\n            msg.value,\\n            signedDataTimestampCutoff,\\n            auctioneer\\n        );\\n    }\\n\\n    /// @notice Called by the current updater of the dApp with ID to update the\\n    /// OEV data feed specific to the dApp\\n    /// @param dappId dApp ID\\n    /// @param signedData Signed data (see `_updateDappOevDataFeed()` for\\n    /// details)\\n    /// @return baseDataFeedId Base data feed ID\\n    /// @return updatedValue Updated value\\n    /// @return updatedTimestamp Updated timestamp\\n    function updateDappOevDataFeed(\\n        uint256 dappId,\\n        bytes[] calldata signedData\\n    )\\n        external\\n        override\\n        returns (\\n            bytes32 baseDataFeedId,\\n            int224 updatedValue,\\n            uint32 updatedTimestamp\\n        )\\n    {\\n        LastPaidBid storage lastPaidBid = dappIdToLastPaidBid[dappId];\\n        require(\\n            msg.sender == lastPaidBid.updater,\\n            \\\"Sender not last bid updater\\\"\\n        );\\n        (\\n            baseDataFeedId,\\n            updatedValue,\\n            updatedTimestamp\\n        ) = _updateDappOevDataFeed(\\n            dappId,\\n            lastPaidBid.signedDataTimestampCutoff,\\n            signedData\\n        );\\n        emit UpdatedDappOevDataFeed(\\n            dappId,\\n            msg.sender,\\n            baseDataFeedId,\\n            updatedValue,\\n            updatedTimestamp\\n        );\\n    }\\n\\n    /// @notice Called by the zero address to simulate an OEV data feed update\\n    /// @dev The intended flow is for a searcher to do a static multicall to\\n    /// this function and `simulateExternalCall()` to check if the current\\n    /// signed data lets them extract OEV. If so, the searcher stores this data\\n    /// and places a bid on OevAuctionHouse. If they win the auction, they pay\\n    /// the bid and use the stored signed data with `updateDappOevDataFeed()`\\n    /// to extract OEV.\\n    /// @param dappId dApp ID\\n    /// @param signedData Signed data (see `_updateDappOevDataFeed()` for\\n    /// details)\\n    /// @return baseDataFeedId Base data feed ID\\n    /// @return updatedValue Updated value\\n    /// @return updatedTimestamp Updated timestamp\\n    function simulateDappOevDataFeedUpdate(\\n        uint256 dappId,\\n        bytes[] calldata signedData\\n    )\\n        external\\n        override\\n        returns (\\n            bytes32 baseDataFeedId,\\n            int224 updatedValue,\\n            uint32 updatedTimestamp\\n        )\\n    {\\n        require(msg.sender == address(0), \\\"Sender address not zero\\\");\\n        (\\n            baseDataFeedId,\\n            updatedValue,\\n            updatedTimestamp\\n        ) = _updateDappOevDataFeed(dappId, type(uint256).max, signedData);\\n    }\\n\\n    /// @notice Called by the zero address to simulate an external call\\n    /// @dev The most basic usage of this is in a static multicall that calls\\n    /// `simulateDappOevDataFeedUpdate()` multiple times to update the relevant\\n    /// feeds, followed by an external call to the liquidator contract of the\\n    /// searcher, which is built to return the revenue from the liquidation.\\n    /// The returned value would then be used to determine the bid amount.\\n    /// @param target Target address of the external call\\n    /// @param data Calldata of the external call\\n    /// @return Returndata of the external call\\n    function simulateExternalCall(\\n        address target,\\n        bytes calldata data\\n    ) external override returns (bytes memory) {\\n        require(msg.sender == address(0), \\\"Sender address not zero\\\");\\n        return Address.functionCall(target, data);\\n    }\\n\\n    /// @notice Value of the OEV data feed specific to the dApp, intended for\\n    /// informational purposes. The dApps are strongly recommended to use the\\n    /// standardized proxies to read data feeds.\\n    /// @param dappId dApp ID\\n    /// @param dataFeedId Data feed ID\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function oevDataFeed(\\n        uint256 dappId,\\n        bytes32 dataFeedId\\n    ) external view override returns (int224 value, uint32 timestamp) {\\n        DataFeed storage dataFeed = _dataFeeds[\\n            keccak256(abi.encodePacked(dappId, dataFeedId))\\n        ];\\n        (value, timestamp) = (dataFeed.value, dataFeed.timestamp);\\n    }\\n\\n    /// @notice Updates OEV data feed specific to the dApp with the signed data\\n    /// @dev This function replicates the guarantees of base feed updates,\\n    /// which makes OEV updates exactly as secure as base feed updates. The\\n    /// main difference between base feed updates and OEV feed updates is that\\n    /// the signature for OEV updates use the hash of the respective template\\n    /// ID (while the base feed updates use the template ID as is).\\n    /// @param dappId dApp ID\\n    /// @param signedDataTimestampCutoff Signed data timestamp cut-off\\n    /// @param signedData Signed data that is a bytes array. Each item in the\\n    /// array is the Airnode address, template ID, data feed timestamp, data\\n    /// feed value and signature belonging to each Beacon. Similar to base feed\\n    /// updates, OEV feed updates allow individual Beacon updates to be omitted\\n    /// (in this case by leaving the signature empty) in case signed data for\\n    /// some of the Beacons is not available.\\n    /// @return baseDataFeedId Base data feed ID\\n    /// @return updatedValue Updated value\\n    /// @return updatedTimestamp Updated timestamp\\n    function _updateDappOevDataFeed(\\n        uint256 dappId,\\n        uint256 signedDataTimestampCutoff,\\n        bytes[] calldata signedData\\n    )\\n        private\\n        returns (\\n            bytes32 baseDataFeedId,\\n            int224 updatedValue,\\n            uint32 updatedTimestamp\\n        )\\n    {\\n        uint256 beaconCount = signedData.length;\\n        require(beaconCount > 0, \\\"Signed data empty\\\");\\n        if (beaconCount == 1) {\\n            (\\n                address airnode,\\n                bytes32 templateId,\\n                uint256 timestamp,\\n                bytes memory data,\\n                bytes memory signature\\n            ) = abi.decode(\\n                    signedData[0],\\n                    (address, bytes32, uint256, bytes, bytes)\\n                );\\n            baseDataFeedId = deriveBeaconId(airnode, templateId);\\n            // Each base feed has an OEV equivalent specific to each dApp. The\\n            // ID of these OEV feeds are simply the dApp ID and the base data\\n            // feed ID hashed together, independent from if the base feed is a\\n            // Beacon or Beacon set.\\n            bytes32 oevBeaconId = keccak256(\\n                abi.encodePacked(dappId, baseDataFeedId)\\n            );\\n            // The signature cannot be omitted for a single Beacon\\n            require(\\n                (\\n                    keccak256(\\n                        abi.encodePacked(\\n                            keccak256(abi.encodePacked(templateId)),\\n                            timestamp,\\n                            data\\n                        )\\n                    ).toEthSignedMessageHash()\\n                ).recover(signature) == airnode,\\n                \\\"Signature mismatch\\\"\\n            );\\n            require(\\n                timestamp <= signedDataTimestampCutoff,\\n                \\\"Timestamp exceeds cut-off\\\"\\n            );\\n            require(\\n                timestamp > _dataFeeds[oevBeaconId].timestamp,\\n                \\\"Does not update timestamp\\\"\\n            );\\n            updatedValue = decodeFulfillmentData(data);\\n            updatedTimestamp = uint32(timestamp);\\n            // We do not need to check if the base feed has a larger timestamp,\\n            // as the proxy will prefer the base feed if it has a larger\\n            // timestamp anyway\\n            _dataFeeds[oevBeaconId] = DataFeed({\\n                value: updatedValue,\\n                timestamp: updatedTimestamp\\n            });\\n        } else {\\n            bytes32[] memory baseBeaconIds = new bytes32[](beaconCount);\\n            bytes32[] memory oevBeaconIds = new bytes32[](beaconCount);\\n            for (uint256 ind = 0; ind < beaconCount; ind++) {\\n                (\\n                    address airnode,\\n                    bytes32 templateId,\\n                    uint256 timestamp,\\n                    bytes memory data,\\n                    bytes memory signature\\n                ) = abi.decode(\\n                        signedData[ind],\\n                        (address, bytes32, uint256, bytes, bytes)\\n                    );\\n                baseBeaconIds[ind] = deriveBeaconId(airnode, templateId);\\n                // We also store individual Beacons of an OEV feed to make sure\\n                // that their timestamps are not reduced by OEV updates\\n                oevBeaconIds[ind] = keccak256(\\n                    abi.encodePacked(dappId, baseBeaconIds[ind])\\n                );\\n                if (signature.length != 0) {\\n                    require(\\n                        (\\n                            keccak256(\\n                                abi.encodePacked(\\n                                    keccak256(abi.encodePacked(templateId)),\\n                                    timestamp,\\n                                    data\\n                                )\\n                            ).toEthSignedMessageHash()\\n                        ).recover(signature) == airnode,\\n                        \\\"Signature mismatch\\\"\\n                    );\\n                    require(\\n                        timestamp <= signedDataTimestampCutoff,\\n                        \\\"Timestamp exceeds cut-off\\\"\\n                    );\\n                    require(\\n                        timestamp > _dataFeeds[oevBeaconIds[ind]].timestamp,\\n                        \\\"Does not update timestamp\\\"\\n                    );\\n                    _dataFeeds[oevBeaconIds[ind]] = DataFeed({\\n                        value: decodeFulfillmentData(data),\\n                        timestamp: uint32(timestamp)\\n                    });\\n                }\\n                // Without the following bit, an OEV update would effectively\\n                // be able to reduce the timestamps of individual Beacons of a\\n                // Beacon set.\\n                (\\n                    int224 baseBeaconValue,\\n                    uint32 baseBeaconTimestamp\\n                ) = IApi3ServerV1(api3ServerV1).dataFeeds(baseBeaconIds[ind]);\\n                if (\\n                    baseBeaconTimestamp >\\n                    _dataFeeds[oevBeaconIds[ind]].timestamp\\n                ) {\\n                    // Carrying over base feed values to OEV feeds is fine\\n                    // because they are secured by identical guarantees\\n                    _dataFeeds[oevBeaconIds[ind]] = DataFeed({\\n                        value: baseBeaconValue,\\n                        timestamp: baseBeaconTimestamp\\n                    });\\n                }\\n            }\\n            baseDataFeedId = deriveBeaconSetId(baseBeaconIds);\\n            (updatedValue, updatedTimestamp) = aggregateBeacons(oevBeaconIds);\\n            bytes32 oevBeaconSetId = keccak256(\\n                abi.encodePacked(dappId, deriveBeaconSetId(baseBeaconIds))\\n            );\\n            DataFeed storage oevBeaconSet = _dataFeeds[oevBeaconSetId];\\n            if (oevBeaconSet.timestamp == updatedTimestamp) {\\n                require(\\n                    oevBeaconSet.value != updatedValue,\\n                    \\\"Does not update Beacon set\\\"\\n                );\\n            }\\n            _dataFeeds[oevBeaconSetId] = DataFeed({\\n                value: updatedValue,\\n                timestamp: updatedTimestamp\\n            });\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0b0000172f0a4faea809b756107f6ff159d4a9a3f5eabba022d7792ec2eecc46\",\"license\":\"MIT\"},\"contracts/api3-server-v1/DataFeedServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../utils/ExtendedSelfMulticall.sol\\\";\\nimport \\\"./aggregation/Median.sol\\\";\\nimport \\\"./interfaces/IDataFeedServer.sol\\\";\\nimport \\\"../vendor/@openzeppelin/contracts@4.8.2/utils/cryptography/ECDSA.sol\\\";\\n\\n/// @title Contract that serves Beacons and Beacon sets\\n/// @notice A Beacon is a live data feed addressed by an ID, which is derived\\n/// from an Airnode address and a template ID. This is suitable where the more\\n/// recent data point is always more favorable, e.g., in the context of an\\n/// asset price data feed. Beacons can also be seen as one-Airnode data feeds\\n/// that can be used individually or combined to build Beacon sets.\\ncontract DataFeedServer is ExtendedSelfMulticall, Median, IDataFeedServer {\\n    using ECDSA for bytes32;\\n\\n    // Airnodes serve their fulfillment data along with timestamps. This\\n    // contract casts the reported data to `int224` and the timestamp to\\n    // `uint32`, which works until year 2106.\\n    struct DataFeed {\\n        int224 value;\\n        uint32 timestamp;\\n    }\\n\\n    /// @notice Data feed with ID\\n    mapping(bytes32 => DataFeed) internal _dataFeeds;\\n\\n    /// @dev Reverts if the timestamp is from more than 1 hour in the future\\n    modifier onlyValidTimestamp(uint256 timestamp) virtual {\\n        unchecked {\\n            require(\\n                timestamp < block.timestamp + 1 hours,\\n                \\\"Timestamp not valid\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    /// @notice Updates the Beacon set using the current values of its Beacons\\n    /// @dev As an oddity, this function still works if some of the IDs in\\n    /// `beaconIds` belong to Beacon sets rather than Beacons. This can be used\\n    /// to implement hierarchical Beacon sets.\\n    /// @param beaconIds Beacon IDs\\n    /// @return beaconSetId Beacon set ID\\n    function updateBeaconSetWithBeacons(\\n        bytes32[] memory beaconIds\\n    ) public override returns (bytes32 beaconSetId) {\\n        (int224 updatedValue, uint32 updatedTimestamp) = aggregateBeacons(\\n            beaconIds\\n        );\\n        beaconSetId = deriveBeaconSetId(beaconIds);\\n        DataFeed storage beaconSet = _dataFeeds[beaconSetId];\\n        if (beaconSet.timestamp == updatedTimestamp) {\\n            require(\\n                beaconSet.value != updatedValue,\\n                \\\"Does not update Beacon set\\\"\\n            );\\n        }\\n        _dataFeeds[beaconSetId] = DataFeed({\\n            value: updatedValue,\\n            timestamp: updatedTimestamp\\n        });\\n        emit UpdatedBeaconSetWithBeacons(\\n            beaconSetId,\\n            updatedValue,\\n            updatedTimestamp\\n        );\\n    }\\n\\n    /// @notice Reads the data feed with ID\\n    /// @param dataFeedId Data feed ID\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function _readDataFeedWithId(\\n        bytes32 dataFeedId\\n    ) internal view returns (int224 value, uint32 timestamp) {\\n        DataFeed storage dataFeed = _dataFeeds[dataFeedId];\\n        (value, timestamp) = (dataFeed.value, dataFeed.timestamp);\\n        require(timestamp > 0, \\\"Data feed not initialized\\\");\\n    }\\n\\n    /// @notice Derives the Beacon ID from the Airnode address and template ID\\n    /// @param airnode Airnode address\\n    /// @param templateId Template ID\\n    /// @return beaconId Beacon ID\\n    function deriveBeaconId(\\n        address airnode,\\n        bytes32 templateId\\n    ) internal pure returns (bytes32 beaconId) {\\n        beaconId = keccak256(abi.encodePacked(airnode, templateId));\\n    }\\n\\n    /// @notice Derives the Beacon set ID from the Beacon IDs\\n    /// @dev Notice that `abi.encode()` is used over `abi.encodePacked()`\\n    /// @param beaconIds Beacon IDs\\n    /// @return beaconSetId Beacon set ID\\n    function deriveBeaconSetId(\\n        bytes32[] memory beaconIds\\n    ) internal pure returns (bytes32 beaconSetId) {\\n        beaconSetId = keccak256(abi.encode(beaconIds));\\n    }\\n\\n    /// @notice Called privately to process the Beacon update\\n    /// @param beaconId Beacon ID\\n    /// @param timestamp Timestamp used in the signature\\n    /// @param data Fulfillment data (an `int256` encoded in contract ABI)\\n    /// @return updatedBeaconValue Updated Beacon value\\n    function processBeaconUpdate(\\n        bytes32 beaconId,\\n        uint256 timestamp,\\n        bytes calldata data\\n    )\\n        internal\\n        onlyValidTimestamp(timestamp)\\n        returns (int224 updatedBeaconValue)\\n    {\\n        updatedBeaconValue = decodeFulfillmentData(data);\\n        require(\\n            timestamp > _dataFeeds[beaconId].timestamp,\\n            \\\"Does not update timestamp\\\"\\n        );\\n        _dataFeeds[beaconId] = DataFeed({\\n            value: updatedBeaconValue,\\n            timestamp: uint32(timestamp)\\n        });\\n    }\\n\\n    /// @notice Called privately to decode the fulfillment data\\n    /// @param data Fulfillment data (an `int256` encoded in contract ABI)\\n    /// @return decodedData Decoded fulfillment data\\n    function decodeFulfillmentData(\\n        bytes memory data\\n    ) internal pure returns (int224) {\\n        require(data.length == 32, \\\"Data length not correct\\\");\\n        int256 decodedData = abi.decode(data, (int256));\\n        require(\\n            decodedData >= type(int224).min && decodedData <= type(int224).max,\\n            \\\"Value typecasting error\\\"\\n        );\\n        return int224(decodedData);\\n    }\\n\\n    /// @notice Called privately to aggregate the Beacons and return the result\\n    /// @param beaconIds Beacon IDs\\n    /// @return value Aggregation value\\n    /// @return timestamp Aggregation timestamp\\n    function aggregateBeacons(\\n        bytes32[] memory beaconIds\\n    ) internal view returns (int224 value, uint32 timestamp) {\\n        uint256 beaconCount = beaconIds.length;\\n        require(beaconCount > 1, \\\"Specified less than two Beacons\\\");\\n        int256[] memory values = new int256[](beaconCount);\\n        int256[] memory timestamps = new int256[](beaconCount);\\n        for (uint256 ind = 0; ind < beaconCount; ) {\\n            DataFeed storage dataFeed = _dataFeeds[beaconIds[ind]];\\n            values[ind] = dataFeed.value;\\n            timestamps[ind] = int256(uint256(dataFeed.timestamp));\\n            unchecked {\\n                ind++;\\n            }\\n        }\\n        value = int224(median(values));\\n        timestamp = uint32(uint256(median(timestamps)));\\n    }\\n}\\n\",\"keccak256\":\"0xff3172da608fcaa59f17557ff06f8355a90d8cf87c3b3a91b8405ec122a064e3\",\"license\":\"MIT\"},\"contracts/api3-server-v1/aggregation/Median.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Sort.sol\\\";\\nimport \\\"./QuickSelect.sol\\\";\\n\\n/// @title Contract to be inherited by contracts that will calculate the median\\n/// of an array\\n/// @notice The operation will be in-place, i.e., the array provided as the\\n/// argument will be modified.\\ncontract Median is Sort, Quickselect {\\n    /// @notice Returns the median of the array\\n    /// @dev Uses an unrolled sorting implementation for shorter arrays and\\n    /// quickselect for longer arrays for gas cost efficiency\\n    /// @param array Array whose median is to be calculated\\n    /// @return Median of the array\\n    function median(int256[] memory array) internal pure returns (int256) {\\n        uint256 arrayLength = array.length;\\n        if (arrayLength <= MAX_SORT_LENGTH) {\\n            sort(array);\\n            if (arrayLength % 2 == 1) {\\n                return array[arrayLength / 2];\\n            } else {\\n                assert(arrayLength != 0);\\n                unchecked {\\n                    return\\n                        average(\\n                            array[arrayLength / 2 - 1],\\n                            array[arrayLength / 2]\\n                        );\\n                }\\n            }\\n        } else {\\n            if (arrayLength % 2 == 1) {\\n                return array[quickselectK(array, arrayLength / 2)];\\n            } else {\\n                uint256 mid1;\\n                uint256 mid2;\\n                unchecked {\\n                    (mid1, mid2) = quickselectKPlusOne(\\n                        array,\\n                        arrayLength / 2 - 1\\n                    );\\n                }\\n                return average(array[mid1], array[mid2]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Averages two signed integers without overflowing\\n    /// @param x Integer x\\n    /// @param y Integer y\\n    /// @return Average of integers x and y\\n    function average(int256 x, int256 y) private pure returns (int256) {\\n        unchecked {\\n            int256 averageRoundedDownToNegativeInfinity = (x >> 1) +\\n                (y >> 1) +\\n                (x & y & 1);\\n            // If the average rounded down to negative infinity is negative\\n            // (i.e., its 256th sign bit is set), and one of (x, y) is even and\\n            // the other one is odd (i.e., the 1st bit of their xor is set),\\n            // add 1 to round the average down to zero instead.\\n            // We will typecast the signed integer to unsigned to logical-shift\\n            // int256(uint256(signedInt)) >> 255 ~= signedInt >>> 255\\n            return\\n                averageRoundedDownToNegativeInfinity +\\n                (int256(\\n                    (uint256(averageRoundedDownToNegativeInfinity) >> 255)\\n                ) & (x ^ y));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x84912d10ad5fa4848f2dfbbac40431ccdeb5250c263718b5fbdfeceeb0946524\",\"license\":\"MIT\"},\"contracts/api3-server-v1/aggregation/QuickSelect.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contract to be inherited by contracts that will calculate the index\\n/// of the k-th and optionally (k+1)-th largest elements in the array\\n/// @notice Uses quickselect, which operates in-place, i.e., the array provided\\n/// as the argument will be modified.\\ncontract Quickselect {\\n    /// @notice Returns the index of the k-th largest element in the array\\n    /// @param array Array in which k-th largest element will be searched\\n    /// @param k K\\n    /// @return indK Index of the k-th largest element\\n    function quickselectK(\\n        int256[] memory array,\\n        uint256 k\\n    ) internal pure returns (uint256 indK) {\\n        uint256 arrayLength = array.length;\\n        assert(arrayLength > 0);\\n        unchecked {\\n            (indK, ) = quickselect(array, 0, arrayLength - 1, k, false);\\n        }\\n    }\\n\\n    /// @notice Returns the index of the k-th and (k+1)-th largest elements in\\n    /// the array\\n    /// @param array Array in which k-th and (k+1)-th largest elements will be\\n    /// searched\\n    /// @param k K\\n    /// @return indK Index of the k-th largest element\\n    /// @return indKPlusOne Index of the (k+1)-th largest element\\n    function quickselectKPlusOne(\\n        int256[] memory array,\\n        uint256 k\\n    ) internal pure returns (uint256 indK, uint256 indKPlusOne) {\\n        uint256 arrayLength = array.length;\\n        assert(arrayLength > 1);\\n        unchecked {\\n            (indK, indKPlusOne) = quickselect(\\n                array,\\n                0,\\n                arrayLength - 1,\\n                k,\\n                true\\n            );\\n        }\\n    }\\n\\n    /// @notice Returns the index of the k-th largest element in the specified\\n    /// section of the (potentially unsorted) array\\n    /// @param array Array in which K will be searched for\\n    /// @param lo Starting index of the section of the array that K will be\\n    /// searched in\\n    /// @param hi Last index of the section of the array that K will be\\n    /// searched in\\n    /// @param k K\\n    /// @param selectKPlusOne If the index of the (k+1)-th largest element is\\n    /// to be returned\\n    /// @return indK Index of the k-th largest element\\n    /// @return indKPlusOne Index of the (k+1)-th largest element (only set if\\n    /// `selectKPlusOne` is `true`)\\n    function quickselect(\\n        int256[] memory array,\\n        uint256 lo,\\n        uint256 hi,\\n        uint256 k,\\n        bool selectKPlusOne\\n    ) private pure returns (uint256 indK, uint256 indKPlusOne) {\\n        if (lo == hi) {\\n            return (k, 0);\\n        }\\n        uint256 indPivot = partition(array, lo, hi);\\n        if (k < indPivot) {\\n            unchecked {\\n                (indK, ) = quickselect(array, lo, indPivot - 1, k, false);\\n            }\\n        } else if (k > indPivot) {\\n            unchecked {\\n                (indK, ) = quickselect(array, indPivot + 1, hi, k, false);\\n            }\\n        } else {\\n            indK = indPivot;\\n        }\\n        // Since Quickselect ends in the array being partitioned around the\\n        // k-th largest element, we can continue searching towards right for\\n        // the (k+1)-th largest element, which is useful in calculating the\\n        // median of an array with even length\\n        if (selectKPlusOne) {\\n            unchecked {\\n                indKPlusOne = indK + 1;\\n            }\\n            uint256 i;\\n            unchecked {\\n                i = indKPlusOne + 1;\\n            }\\n            uint256 arrayLength = array.length;\\n            for (; i < arrayLength; ) {\\n                if (array[i] < array[indKPlusOne]) {\\n                    indKPlusOne = i;\\n                }\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Partitions the array into two around a pivot\\n    /// @param array Array that will be partitioned\\n    /// @param lo Starting index of the section of the array that will be\\n    /// partitioned\\n    /// @param hi Last index of the section of the array that will be\\n    /// partitioned\\n    /// @return pivotInd Pivot index\\n    function partition(\\n        int256[] memory array,\\n        uint256 lo,\\n        uint256 hi\\n    ) private pure returns (uint256 pivotInd) {\\n        if (lo == hi) {\\n            return lo;\\n        }\\n        int256 pivot = array[lo];\\n        uint256 i = lo;\\n        unchecked {\\n            pivotInd = hi + 1;\\n        }\\n        while (true) {\\n            do {\\n                unchecked {\\n                    i++;\\n                }\\n            } while (i < array.length && array[i] < pivot);\\n            do {\\n                unchecked {\\n                    pivotInd--;\\n                }\\n            } while (array[pivotInd] > pivot);\\n            if (i >= pivotInd) {\\n                (array[lo], array[pivotInd]) = (array[pivotInd], array[lo]);\\n                return pivotInd;\\n            }\\n            (array[i], array[pivotInd]) = (array[pivotInd], array[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f458dd165fed89866c5fe626e3df3c9bf6884498ec1233f4083615084521d6e\",\"license\":\"MIT\"},\"contracts/api3-server-v1/aggregation/Sort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contract to be inherited by contracts that will sort an array using\\n/// an unrolled implementation\\n/// @notice The operation will be in-place, i.e., the array provided as the\\n/// argument will be modified.\\ncontract Sort {\\n    uint256 internal constant MAX_SORT_LENGTH = 9;\\n\\n    /// @notice Sorts the array\\n    /// @param array Array to be sorted\\n    function sort(int256[] memory array) internal pure {\\n        uint256 arrayLength = array.length;\\n        require(arrayLength <= MAX_SORT_LENGTH, \\\"Array too long to sort\\\");\\n        // Do a binary search\\n        if (arrayLength < 6) {\\n            // Possible lengths: 1, 2, 3, 4, 5\\n            if (arrayLength < 4) {\\n                // Possible lengths: 1, 2, 3\\n                if (arrayLength == 3) {\\n                    // Length: 3\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                } else if (arrayLength == 2) {\\n                    // Length: 2\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                }\\n                // Do nothing for Length: 1\\n            } else {\\n                // Possible lengths: 4, 5\\n                if (arrayLength == 5) {\\n                    // Length: 5\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 0, 3);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                } else {\\n                    // Length: 4\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                }\\n            }\\n        } else {\\n            // Possible lengths: 6, 7, 8, 9\\n            if (arrayLength < 8) {\\n                // Possible lengths: 6, 7\\n                if (arrayLength == 7) {\\n                    // Length: 7\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 5, 6);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 4, 6);\\n                    swapIfFirstIsLarger(array, 3, 5);\\n                    swapIfFirstIsLarger(array, 2, 6);\\n                    swapIfFirstIsLarger(array, 1, 5);\\n                    swapIfFirstIsLarger(array, 0, 4);\\n                    swapIfFirstIsLarger(array, 2, 5);\\n                    swapIfFirstIsLarger(array, 0, 3);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                } else {\\n                    // Length: 6\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 3, 5);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                }\\n            } else {\\n                // Possible lengths: 8, 9\\n                if (arrayLength == 9) {\\n                    // Length: 9\\n                    swapIfFirstIsLarger(array, 1, 8);\\n                    swapIfFirstIsLarger(array, 2, 7);\\n                    swapIfFirstIsLarger(array, 3, 6);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 1, 4);\\n                    swapIfFirstIsLarger(array, 5, 8);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 6, 7);\\n                    swapIfFirstIsLarger(array, 2, 6);\\n                    swapIfFirstIsLarger(array, 7, 8);\\n                    swapIfFirstIsLarger(array, 0, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 3, 5);\\n                    swapIfFirstIsLarger(array, 6, 7);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 5, 7);\\n                    swapIfFirstIsLarger(array, 4, 6);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 5, 6);\\n                    swapIfFirstIsLarger(array, 7, 8);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                } else {\\n                    // Length: 8\\n                    swapIfFirstIsLarger(array, 0, 7);\\n                    swapIfFirstIsLarger(array, 1, 6);\\n                    swapIfFirstIsLarger(array, 2, 5);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 0, 3);\\n                    swapIfFirstIsLarger(array, 4, 7);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 5, 6);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 6, 7);\\n                    swapIfFirstIsLarger(array, 3, 5);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 5, 6);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Swaps two elements of an array if the first element is greater\\n    /// than the second\\n    /// @param array Array whose elements are to be swapped\\n    /// @param ind1 Index of the first element\\n    /// @param ind2 Index of the second element\\n    function swapIfFirstIsLarger(\\n        int256[] memory array,\\n        uint256 ind1,\\n        uint256 ind2\\n    ) private pure {\\n        if (array[ind1] > array[ind2]) {\\n            (array[ind1], array[ind2]) = (array[ind2], array[ind1]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x81e3790f7964b0169e60022f00f988a136e37a043053d8b07c794cc1c9b6c510\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IApi3ServerV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOevDapiServer.sol\\\";\\nimport \\\"./IBeaconUpdatesWithSignedData.sol\\\";\\n\\ninterface IApi3ServerV1 is IOevDapiServer, IBeaconUpdatesWithSignedData {\\n    function readDataFeedWithId(\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedWithDapiNameHash(\\n        bytes32 dapiNameHash\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedWithIdAsOevProxy(\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedWithDapiNameHashAsOevProxy(\\n        bytes32 dapiNameHash\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function dataFeeds(\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function oevProxyToIdToDataFeed(\\n        address proxy,\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n}\\n\",\"keccak256\":\"0xea2c05eaf2a19c93a9c9b08243fcabd8d7fcf0e4d422f7c687aef693126c1809\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IApi3ServerV1OevExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/interfaces/IAccessControlRegistryAdminnedWithManager.sol\\\";\\nimport \\\"../interfaces/IDataFeedServer.sol\\\";\\n\\ninterface IApi3ServerV1OevExtension is\\n    IAccessControlRegistryAdminnedWithManager,\\n    IDataFeedServer\\n{\\n    event Withdrew(address recipient, uint256 amount, address sender);\\n\\n    event PaidOevBid(\\n        uint256 indexed dappId,\\n        address indexed updater,\\n        uint256 bidAmount,\\n        uint256 signedDataTimestampCutoff,\\n        address auctioneer\\n    );\\n\\n    event UpdatedDappOevDataFeed(\\n        uint256 indexed dappId,\\n        address indexed updater,\\n        bytes32 dataFeedId,\\n        int224 updatedValue,\\n        uint32 updatedTimestamp\\n    );\\n\\n    function withdraw(address recipient, uint256 amount) external;\\n\\n    function payOevBid(\\n        uint256 dappId,\\n        uint32 signedDataTimestampCutoff,\\n        bytes calldata signature\\n    ) external payable;\\n\\n    function updateDappOevDataFeed(\\n        uint256 dappId,\\n        bytes[] calldata signedData\\n    )\\n        external\\n        returns (\\n            bytes32 baseDataFeedId,\\n            int224 updatedValue,\\n            uint32 updatedTimestamp\\n        );\\n\\n    function simulateDappOevDataFeedUpdate(\\n        uint256 dappId,\\n        bytes[] calldata signedData\\n    )\\n        external\\n        returns (\\n            bytes32 baseDataFeedId,\\n            int224 updatedValue,\\n            uint32 updatedTimestamp\\n        );\\n\\n    function simulateExternalCall(\\n        address target,\\n        bytes calldata data\\n    ) external returns (bytes memory);\\n\\n    function oevDataFeed(\\n        uint256 dappId,\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function WITHDRAWER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function AUCTIONEER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    function withdrawerRole() external view returns (bytes32);\\n\\n    function auctioneerRole() external view returns (bytes32);\\n\\n    function api3ServerV1() external view returns (address);\\n\\n    function dappIdToLastPaidBid(\\n        uint256 dappId\\n    ) external view returns (address updater, uint32 endTimestamp);\\n}\\n\",\"keccak256\":\"0x606f0a0686f986b97cd369e50a99bb631aef114244cfd310b30c175b7b44a992\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IBeaconUpdatesWithSignedData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDataFeedServer.sol\\\";\\n\\ninterface IBeaconUpdatesWithSignedData is IDataFeedServer {\\n    function updateBeaconWithSignedData(\\n        address airnode,\\n        bytes32 templateId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external returns (bytes32 beaconId);\\n}\\n\",\"keccak256\":\"0xe2b2530081508baf1323d4c145a688ffd548cf318a8cb67c9ccb4abe1ac81c6e\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IDapiServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/interfaces/IAccessControlRegistryAdminnedWithManager.sol\\\";\\nimport \\\"./IDataFeedServer.sol\\\";\\n\\ninterface IDapiServer is\\n    IAccessControlRegistryAdminnedWithManager,\\n    IDataFeedServer\\n{\\n    event SetDapiName(\\n        bytes32 indexed dataFeedId,\\n        bytes32 indexed dapiName,\\n        address sender\\n    );\\n\\n    function setDapiName(bytes32 dapiName, bytes32 dataFeedId) external;\\n\\n    function dapiNameToDataFeedId(\\n        bytes32 dapiName\\n    ) external view returns (bytes32);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DAPI_NAME_SETTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    function dapiNameSetterRole() external view returns (bytes32);\\n\\n    function dapiNameHashToDataFeedId(\\n        bytes32 dapiNameHash\\n    ) external view returns (bytes32 dataFeedId);\\n}\\n\",\"keccak256\":\"0x1cf1d7637e2ee1b4f5b99345730183447db78ceb8ce2117cf145d4d375194e71\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IDataFeedServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/interfaces/IExtendedSelfMulticall.sol\\\";\\n\\ninterface IDataFeedServer is IExtendedSelfMulticall {\\n    event UpdatedBeaconWithSignedData(\\n        bytes32 indexed beaconId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedBeaconSetWithBeacons(\\n        bytes32 indexed beaconSetId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    function updateBeaconSetWithBeacons(\\n        bytes32[] memory beaconIds\\n    ) external returns (bytes32 beaconSetId);\\n}\\n\",\"keccak256\":\"0x208f751f71b16d454cafd9188095178fdc776ee0376a85362f6022e7a4f010a3\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IOevDapiServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOevDataFeedServer.sol\\\";\\nimport \\\"./IDapiServer.sol\\\";\\n\\ninterface IOevDapiServer is IOevDataFeedServer, IDapiServer {}\\n\",\"keccak256\":\"0xf4082c33979785131358a217a8c5cf498a53c04318868eb1cb68e934c33226e3\",\"license\":\"MIT\"},\"contracts/api3-server-v1/interfaces/IOevDataFeedServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDataFeedServer.sol\\\";\\n\\ninterface IOevDataFeedServer is IDataFeedServer {\\n    event UpdatedOevProxyBeaconWithSignedData(\\n        bytes32 indexed beaconId,\\n        address indexed proxy,\\n        bytes32 indexed updateId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedOevProxyBeaconSetWithSignedData(\\n        bytes32 indexed beaconSetId,\\n        address indexed proxy,\\n        bytes32 indexed updateId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event Withdrew(\\n        address indexed oevProxy,\\n        address oevBeneficiary,\\n        uint256 amount\\n    );\\n\\n    function updateOevProxyDataFeedWithSignedData(\\n        address oevProxy,\\n        bytes32 dataFeedId,\\n        bytes32 updateId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes[] calldata packedOevUpdateSignatures\\n    ) external payable;\\n\\n    function withdraw(address oevProxy) external;\\n\\n    function oevProxyToBalance(\\n        address oevProxy\\n    ) external view returns (uint256 balance);\\n}\\n\",\"keccak256\":\"0x2d162c576bfe5554767bb48758314c3e6f2c509f73203f0e166d1ac5168a1218\",\"license\":\"MIT\"},\"contracts/utils/ExtendedSelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./SelfMulticall.sol\\\";\\nimport \\\"./interfaces/IExtendedSelfMulticall.sol\\\";\\n\\n/// @title Contract that extends SelfMulticall to fetch some of the global\\n/// variables\\n/// @notice Available global variables are limited to the ones that Airnode\\n/// tends to need\\ncontract ExtendedSelfMulticall is SelfMulticall, IExtendedSelfMulticall {\\n    /// @notice Returns the chain ID\\n    /// @return Chain ID\\n    function getChainId() external view override returns (uint256) {\\n        return block.chainid;\\n    }\\n\\n    /// @notice Returns the account balance\\n    /// @param account Account address\\n    /// @return Account balance\\n    function getBalance(\\n        address account\\n    ) external view override returns (uint256) {\\n        return account.balance;\\n    }\\n\\n    /// @notice Returns if the account contains bytecode\\n    /// @dev An account not containing any bytecode does not indicate that it\\n    /// is an EOA or it will not contain any bytecode in the future.\\n    /// Contract construction and `SELFDESTRUCT` updates the bytecode at the\\n    /// end of the transaction.\\n    /// @return If the account contains bytecode\\n    function containsBytecode(\\n        address account\\n    ) external view override returns (bool) {\\n        return account.code.length > 0;\\n    }\\n\\n    /// @notice Returns the current block number\\n    /// @return Current block number\\n    function getBlockNumber() external view override returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /// @notice Returns the current block timestamp\\n    /// @return Current block timestamp\\n    function getBlockTimestamp() external view override returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @notice Returns the current block basefee\\n    /// @return Current block basefee\\n    function getBlockBasefee() external view override returns (uint256) {\\n        return block.basefee;\\n    }\\n}\\n\",\"keccak256\":\"0xada4020386f51e076953a110accf21efc53b82858bb88fc6725591556d86574b\",\"license\":\"MIT\"},\"contracts/utils/SelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/ISelfMulticall.sol\\\";\\n\\n/// @title Contract that enables calls to the inheriting contract to be batched\\n/// @notice Implements two ways of batching, one requires none of the calls to\\n/// revert and the other tolerates individual calls reverting\\n/// @dev This implementation uses delegatecall for individual function calls.\\n/// Since delegatecall is a message call, it can only be made to functions that\\n/// are externally visible. This means that a contract cannot multicall its own\\n/// functions that use internal/private visibility modifiers.\\n/// Refer to OpenZeppelin's Multicall.sol for a similar implementation.\\ncontract SelfMulticall is ISelfMulticall {\\n    /// @notice Batches calls to the inheriting contract and reverts as soon as\\n    /// one of the batched calls reverts\\n    /// @param data Array of calldata of batched calls\\n    /// @return returndata Array of returndata of batched calls\\n    function multicall(\\n        bytes[] calldata data\\n    ) external override returns (bytes[] memory returndata) {\\n        uint256 callCount = data.length;\\n        returndata = new bytes[](callCount);\\n        for (uint256 ind = 0; ind < callCount; ) {\\n            bool success;\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (success, returndata[ind]) = address(this).delegatecall(data[ind]);\\n            if (!success) {\\n                bytes memory returndataWithRevertData = returndata[ind];\\n                if (returndataWithRevertData.length > 0) {\\n                    // Adapted from OpenZeppelin's Address.sol\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        let returndata_size := mload(returndataWithRevertData)\\n                        revert(\\n                            add(32, returndataWithRevertData),\\n                            returndata_size\\n                        )\\n                    }\\n                } else {\\n                    revert(\\\"Multicall: No revert string\\\");\\n                }\\n            }\\n            unchecked {\\n                ind++;\\n            }\\n        }\\n    }\\n\\n    /// @notice Batches calls to the inheriting contract but does not revert if\\n    /// any of the batched calls reverts\\n    /// @param data Array of calldata of batched calls\\n    /// @return successes Array of success conditions of batched calls\\n    /// @return returndata Array of returndata of batched calls\\n    function tryMulticall(\\n        bytes[] calldata data\\n    )\\n        external\\n        override\\n        returns (bool[] memory successes, bytes[] memory returndata)\\n    {\\n        uint256 callCount = data.length;\\n        successes = new bool[](callCount);\\n        returndata = new bytes[](callCount);\\n        for (uint256 ind = 0; ind < callCount; ) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (successes[ind], returndata[ind]) = address(this).delegatecall(\\n                data[ind]\\n            );\\n            unchecked {\\n                ind++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb466760f7b5d05a91fb168224952f29db9aa3308f0b83535fd697f3c30281740\",\"license\":\"MIT\"},\"contracts/utils/interfaces/IExtendedSelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISelfMulticall.sol\\\";\\n\\ninterface IExtendedSelfMulticall is ISelfMulticall {\\n    function getChainId() external view returns (uint256);\\n\\n    function getBalance(address account) external view returns (uint256);\\n\\n    function containsBytecode(address account) external view returns (bool);\\n\\n    function getBlockNumber() external view returns (uint256);\\n\\n    function getBlockTimestamp() external view returns (uint256);\\n\\n    function getBlockBasefee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaefe61a623c920d3e39c4779535e280378b44202d11c29a2c96f46f2fe5f420d\",\"license\":\"MIT\"},\"contracts/utils/interfaces/ISelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISelfMulticall {\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory returndata);\\n\\n    function tryMulticall(\\n        bytes[] calldata data\\n    ) external returns (bool[] memory successes, bytes[] memory returndata);\\n}\\n\",\"keccak256\":\"0x50b27284f0d5acd8b340836c09d252138ebf059f426e5d90d3f7221e1b7d0817\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@4.8.2/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@4.8.2/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@4.8.2/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@4.8.2/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"contracts/vendor/@openzeppelin/contracts@4.8.2/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162003d0138038062003d018339810160408190526200003591620003c5565b83838382826001600160a01b038216620000895760405162461bcd60e51b815260206004820152601060248201526f4143522061646472657373207a65726f60801b60448201526064015b60405180910390fd5b6000815111620000dc5760405162461bcd60e51b815260206004820152601c60248201527f41646d696e20726f6c65206465736372697074696f6e20656d70747900000000604482015260640162000080565b6001600160a01b0382166080526000620000f7828262000547565b50806040516020016200010b919062000613565b60408051601f19818403018152919052805160209091012060a05250506001600160a01b038116620001805760405162461bcd60e51b815260206004820152601460248201527f4d616e616765722061646472657373207a65726f000000000000000000000000604482015260640162000080565b6001600160a01b03811660c052620001988162000283565b60e0525050506001600160a01b038116620001f65760405162461bcd60e51b815260206004820152601960248201527f4170693353657276657256312061646472657373207a65726f00000000000000604482015260640162000080565b6001600160a01b038116610140526200023a620002138362000283565b60408051808201909152600a8152692bb4ba34323930bbb2b960b11b6020820152620002fd565b61010052620002746200024d8362000283565b60408051808201909152600a81526920bab1ba34b7b732b2b960b11b6020820152620002fd565b61012052506200063192505050565b6000620002f7620002c8836040516001600160601b0319606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b60a051604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b92915050565b600062000339838360405160200162000317919062000613565b604051602081830303815290604052805190602001206200034060201b60201c565b9392505050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b80516001600160a01b03811681146200038457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620003bc578181015183820152602001620003a2565b50506000910152565b60008060008060808587031215620003dc57600080fd5b620003e7856200036c565b60208601519094506001600160401b03808211156200040557600080fd5b818701915087601f8301126200041a57600080fd5b8151818111156200042f576200042f62000389565b604051601f8201601f19908116603f011681019083821181831017156200045a576200045a62000389565b816040528281528a60208487010111156200047457600080fd5b620004878360208301602088016200039f565b80975050505050506200049d604086016200036c565b9150620004ad606086016200036c565b905092959194509250565b600181811c90821680620004cd57607f821691505b602082108103620004ee57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200054257600081815260208120601f850160051c810160208610156200051d5750805b601f850160051c820191505b818110156200053e5782815560010162000529565b5050505b505050565b81516001600160401b0381111562000563576200056362000389565b6200057b81620005748454620004b8565b84620004f4565b602080601f831160018114620005b357600084156200059a5750858301515b600019600386901b1c1916600185901b1785556200053e565b600085815260208120601f198616915b82811015620005e457888601518255948401946001909101908401620005c3565b5085821015620006035787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251620006278184602087016200039f565b9190910192915050565b60805160a05160c05160e05161010051610120516101405161364e620006b3600039600081816102920152611c720152600081816102120152610e990152600081816105670152611188015260006101ab01526000818161031a01526111520152600050506000818161024601528181610ed201526111b4015261364e6000f3fe6080604052600436106101945760003560e01c806359e5c6b9116100e1578063ac9650d81161008a578063f1939bd011610064578063f1939bd014610589578063f3fef3a3146105d2578063f7729409146105f2578063f8b2cb4f1461061257600080fd5b8063ac9650d814610513578063db2da59714610540578063e8597c371461055557600080fd5b806391526c36116100bb57806391526c361461042757806396bb5dbd146104665780639f416522146104cf57600080fd5b806359e5c6b9146103ab5780635ae64712146103cb578063796b89b91461041457600080fd5b806342cbb15c116101435780634c8f1d8d1161011d5780634c8f1d8d1461033c5780634dcc19fe1461035e5780635989eaeb1461037157600080fd5b806342cbb15c146102c7578063437b9116146102da578063481c6a751461030857600080fd5b80631ce9ae07116101745780631ce9ae07146102345780632d6a744e146102805780633408e470146102b457600080fd5b80629f2f3c14610199578062aae33f146101e05780631be8d01f14610200575b600080fd5b3480156101a557600080fd5b506101cd7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b3480156101ec57600080fd5b506101cd6101fb366004612ea4565b61063a565b34801561020c57600080fd5b506101cd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561024057600080fd5b506102687f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101d7565b34801561028c57600080fd5b506102687f000000000000000000000000000000000000000000000000000000000000000081565b3480156102c057600080fd5b50466101cd565b3480156102d357600080fd5b50436101cd565b3480156102e657600080fd5b506102fa6102f5366004612f8f565b610767565b6040516101d792919061306d565b34801561031457600080fd5b506102687f000000000000000000000000000000000000000000000000000000000000000081565b34801561034857600080fd5b506103516108cd565b6040516101d791906130c6565b34801561036a57600080fd5b50486101cd565b34801561037d57600080fd5b5061039b61038c3660046130ee565b6001600160a01b03163b151590565b60405190151581526020016101d7565b3480156103b757600080fd5b506103516103c636600461314d565b61095b565b3480156103d757600080fd5b506103516040518060400160405280600a81526020017f41756374696f6e6565720000000000000000000000000000000000000000000081525081565b34801561042057600080fd5b50426101cd565b34801561043357600080fd5b506104476104423660046131a2565b6109f5565b60408051601b9390930b835263ffffffff9091166020830152016101d7565b34801561047257600080fd5b506104ab6104813660046131c4565b6002602052600090815260409020546001600160a01b03811690600160a01b900463ffffffff1682565b604080516001600160a01b03909316835263ffffffff9091166020830152016101d7565b3480156104db57600080fd5b506104ef6104ea3660046131dd565b610a5d565b60408051938452601b9290920b602084015263ffffffff16908201526060016101d7565b34801561051f57600080fd5b5061053361052e366004612f8f565b610b43565b6040516101d7919061321c565b61055361054e366004613241565b610cc4565b005b34801561056157600080fd5b506101cd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561059557600080fd5b506103516040518060400160405280600a81526020017f576974686472617765720000000000000000000000000000000000000000000081525081565b3480156105de57600080fd5b506105536105ed36600461329d565b6110a1565b3480156105fe57600080fd5b506104ef61060d3660046131dd565b611363565b34801561061e57600080fd5b506101cd61062d3660046130ee565b6001600160a01b03163190565b6000806000610648846113d2565b9150915061065584611574565b600081815260016020526040902080549194509063ffffffff808416600160e01b90920416036106db578054601b84810b91900b036106db5760405162461bcd60e51b815260206004820152601a60248201527f446f6573206e6f742075706461746520426561636f6e2073657400000000000060448201526064015b60405180910390fd5b604080518082018252601b85900b80825263ffffffff858116602080850182815260008b81526001835287902095519051909316600160e01b026001600160e01b0390931692909217909355835191825281019190915285917fb7712be6248d021e8c56ac9613c09491354a4d0f4ad0b7db1a664b35be4b2349910160405180910390a2505050919050565b606080828067ffffffffffffffff81111561078457610784612e5d565b6040519080825280602002602001820160405280156107ad578160200160208202803683370190505b5092508067ffffffffffffffff8111156107c9576107c9612e5d565b6040519080825280602002602001820160405280156107fc57816020015b60608152602001906001900390816107e75790505b50915060005b818110156108c4573086868381811061081d5761081d6132c9565b905060200281019061082f91906132df565b60405161083d929190613326565b600060405180830381855af49150503d8060008114610878576040519150601f19603f3d011682016040523d82523d6000602084013e61087d565b606091505b50858381518110610890576108906132c9565b602002602001018584815181106108a9576108a96132c9565b60209081029190910101919091529015159052600101610802565b50509250929050565b600080546108da90613336565b80601f016020809104026020016040519081016040528092919081815260200182805461090690613336565b80156109535780601f1061092857610100808354040283529160200191610953565b820191906000526020600020905b81548152906001019060200180831161093657829003601f168201915b505050505081565b606033156109ab5760405162461bcd60e51b815260206004820152601760248201527f53656e6465722061646472657373206e6f74207a65726f00000000000000000060448201526064016106d2565b6109eb8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115a492505050565b90505b9392505050565b6000806000600160008686604051602001610a1a929190918252602082015260400190565b60408051808303601f1901815291815281516020928301208352908201929092520160002054601b81900b96600160e01b90910463ffffffff1695509350505050565b60008381526002602052604081208054829182916001600160a01b03163314610ac85760405162461bcd60e51b815260206004820152601b60248201527f53656e646572206e6f74206c617374206269642075706461746572000000000060448201526064016106d2565b8054610ae4908890600160a01b900463ffffffff1688886115f1565b60408051848152601b84900b602082015263ffffffff83168183015290519397509195509350339189917ff775a9e1e1719e1dfecea2021e4b9861ac4d02846df440c4cba17e3ce855f913919081900360600190a35093509350939050565b6060818067ffffffffffffffff811115610b5f57610b5f612e5d565b604051908082528060200260200182016040528015610b9257816020015b6060815260200190600190039081610b7d5790505b50915060005b81811015610cbc57600030868684818110610bb557610bb56132c9565b9050602002810190610bc791906132df565b604051610bd5929190613326565b600060405180830381855af49150503d8060008114610c10576040519150601f19603f3d011682016040523d82523d6000602084013e610c15565b606091505b50858481518110610c2857610c286132c9565b6020908102919091010152905080610cb3576000848381518110610c4e57610c4e6132c9565b60200260200101519050600081511115610c6b5780518082602001fd5b60405162461bcd60e51b815260206004820152601b60248201527f4d756c746963616c6c3a204e6f2072657665727420737472696e67000000000060448201526064016106d2565b50600101610b98565b505092915050565b83600003610d145760405162461bcd60e51b815260206004820152600c60248201527f64417070204944207a65726f000000000000000000000000000000000000000060448201526064016106d2565b8263ffffffff16600003610d6a5760405162461bcd60e51b815260206004820152600c60248201527f4375742d6f6666207a65726f000000000000000000000000000000000000000060448201526064016106d2565b610d7642610e10613380565b8363ffffffff1610610dca5760405162461bcd60e51b815260206004820152601d60248201527f4375742d6f666620746f6f2066617220696e207468652066757475726500000060448201526064016106d2565b6000610e8a83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080514660208201529081018a905233606090811b6bffffffffffffffffffffffff19169082015234607482015260e089901b7fffffffff00000000000000000000000000000000000000000000000000000000166094820152610e84925060980190505b60405160208183030381529060405280519060200120611f22565b90611f5d565b604051632474521560e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0380831660248301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906391d1485490604401602060405180830381865afa158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f9190613393565b610f805760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016106d2565b60008581526002602052604090205463ffffffff808616600160a01b9092041610610fed5760405162461bcd60e51b815260206004820152601760248201527f4375742d6f6666206e6f74206d6f726520726563656e7400000000000000000060448201526064016106d2565b6040805180820182523380825263ffffffff878116602080850182815260008c815260028352879020955186549151909416600160a01b027fffffffffffffffff0000000000000000000000000000000000000000000000009091166001600160a01b03948516171790945584513481529384015284169282019290925286907f39b24cbe33ddb28dc22abcbaf14bf7f5544cc9c886c49dbb2f0d30e9dd1448949060600160405180910390a35050505050565b6001600160a01b0382166110f75760405162461bcd60e51b815260206004820152601660248201527f526563697069656e742061646472657373207a65726f0000000000000000000060448201526064016106d2565b806000036111475760405162461bcd60e51b815260206004820152600b60248201527f416d6f756e74207a65726f00000000000000000000000000000000000000000060448201526064016106d2565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806112275750604051632474521560e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015611203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112279190613393565b6112735760405162461bcd60e51b815260206004820152601660248201527f53656e6465722063616e6e6f742077697468647261770000000000000000000060448201526064016106d2565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146112c0576040519150601f19603f3d011682016040523d82523d6000602084013e6112c5565b606091505b50509050806113165760405162461bcd60e51b815260206004820152601360248201527f5769746864726177616c2072657665727465640000000000000000000000000060448201526064016106d2565b604080516001600160a01b038516815260208101849052338183015290517fff79f55e9fae054ff094d9e06f631119716d818f9f8ea9b5b2adf5679f6c12e09181900360600190a1505050565b6000808033156113b55760405162461bcd60e51b815260206004820152601760248201527f53656e6465722061646472657373206e6f74207a65726f00000000000000000060448201526064016106d2565b6113c38660001987876115f1565b91989097509095509350505050565b80516000908190600181116114295760405162461bcd60e51b815260206004820152601f60248201527f537065636966696564206c657373207468616e2074776f20426561636f6e730060448201526064016106d2565b60008167ffffffffffffffff81111561144457611444612e5d565b60405190808252806020026020018201604052801561146d578160200160208202803683370190505b50905060008267ffffffffffffffff81111561148b5761148b612e5d565b6040519080825280602002602001820160405280156114b4578160200160208202803683370190505b50905060005b83811015611555576000600160008984815181106114da576114da6132c9565b602090810291909101810151825281019190915260400160002080548551919250601b0b90859084908110611511576115116132c9565b602090810291909101015280548351600160e01b90910463ffffffff1690849084908110611541576115416132c9565b6020908102919091010152506001016114ba565b5061155f82611f81565b945061156a81611f81565b9350505050915091565b60008160405160200161158791906133b5565b604051602081830303815290604052805190602001209050919050565b60606115e8838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506120d3565b90505b92915050565b6000808083806116435760405162461bcd60e51b815260206004820152601160248201527f5369676e6564206461746120656d70747900000000000000000000000000000060448201526064016106d2565b806001036118c75760008060008060008a8a6000818110611666576116666132c9565b905060200281019061167891906132df565b8101906116859190613469565b945094509450945094506116db85856040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b985060008d8a6040516020016116fb929190918252602082015260400190565b604051602081830303815290604052805190602001209050856001600160a01b031661176183610e848860405160200161173791815260200190565b604051602081830303815290604052805190602001208888604051602001610e69939291906134f3565b6001600160a01b0316146117ac5760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016106d2565b8c8411156117fc5760405162461bcd60e51b815260206004820152601960248201527f54696d657374616d702065786365656473206375742d6f66660000000000000060448201526064016106d2565b600081815260016020526040902054600160e01b900463ffffffff1684116118665760405162461bcd60e51b815260206004820152601960248201527f446f6573206e6f74207570646174652074696d657374616d700000000000000060448201526064016106d2565b61186f836121c7565b604080518082018252601b83900b815263ffffffff80881660208084019182526000968752600190529290942090519151909316600160e01b026001600160e01b03909116179091559750919550611f179350505050565b60008167ffffffffffffffff8111156118e2576118e2612e5d565b60405190808252806020026020018201604052801561190b578160200160208202803683370190505b50905060008267ffffffffffffffff81111561192957611929612e5d565b604051908082528060200260200182016040528015611952578160200160208202803683370190505b50905060005b83811015611dfc5760008060008060008d8d8781811061197a5761197a6132c9565b905060200281019061198c91906132df565b8101906119999190613469565b945094509450945094506119ef85856040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b888781518110611a0157611a016132c9565b6020026020010181815250508f888781518110611a2057611a206132c9565b6020026020010151604051602001611a42929190918252602082015260400190565b60405160208183030381529060405280519060200120878781518110611a6a57611a6a6132c9565b6020908102919091010152805115611c6d57846001600160a01b0316611aca82610e8487604051602001611aa091815260200190565b604051602081830303815290604052805190602001208787604051602001610e69939291906134f3565b6001600160a01b031614611b155760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016106d2565b8e831115611b655760405162461bcd60e51b815260206004820152601960248201527f54696d657374616d702065786365656473206375742d6f66660000000000000060448201526064016106d2565b60016000888881518110611b7b57611b7b6132c9565b602090810291909101810151825281019190915260400160002054600160e01b900463ffffffff168311611bf15760405162461bcd60e51b815260206004820152601960248201527f446f6573206e6f74207570646174652074696d657374616d700000000000000060448201526064016106d2565b6040518060400160405280611c05846121c7565b601b0b81526020018463ffffffff1681525060016000898981518110611c2d57611c2d6132c9565b6020908102919091018101518252818101929092526040016000208251929091015163ffffffff16600160e01b026001600160e01b039092169190911790555b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166367a7cfb78b8a81518110611cb157611cb16132c9565b60200260200101516040518263ffffffff1660e01b8152600401611cd791815260200190565b6040805180830381865afa158015611cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d179190613520565b91509150600160008a8a81518110611d3157611d316132c9565b60200260200101518152602001908152602001600020600001601c9054906101000a900463ffffffff1663ffffffff168163ffffffff161115611de257604051806040016040528083601b0b81526020018263ffffffff16815250600160008b8b81518110611da257611da26132c9565b6020908102919091018101518252818101929092526040016000208251929091015163ffffffff16600160e01b026001600160e01b039092169190911790555b505050505050508080611df490613560565b915050611958565b50611e0682611574565b9550611e11816113d2565b909550935060008a611e2284611574565b60408051602081019390935282015260600160408051601f19818403018152918152815160209283012060008181526001909352912080549192509063ffffffff808816600160e01b9092041603611ecb578054601b88810b91900b03611ecb5760405162461bcd60e51b815260206004820152601a60248201527f446f6573206e6f742075706461746520426561636f6e2073657400000000000060448201526064016106d2565b50604080518082018252601b88900b815263ffffffff80881660208084019182526000958652600190529290932090519151909216600160e01b026001600160e01b0390911617905550505b509450945094915050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01611587565b6000806000611f6c85856122ca565b91509150611f798161230f565b509392505050565b80516000906009811161205357611f9783612477565b611fa260028261358f565b600103611fd55782611fb56002836135a3565b81518110611fc557611fc56132c9565b6020026020010151915050919050565b80600003611fe557611fe56135b7565b6109ee836001600284040381518110612000576120006132c9565b6020026020010151846002848161201957612019613579565b048151811061202a5761202a6132c9565b6020026020010151600182811d82821d01838316919091160160ff81901c838318160192915050565b61205e60028261358f565b60010361207a5782611fb5816120756002856135a3565b612989565b60008061208d85600160028604036129b6565b80925081935050506120c48583815181106120aa576120aa6132c9565b602002602001015186838151811061202a5761202a6132c9565b95945050505050565b50919050565b60608247101561214b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016106d2565b600080866001600160a01b0316858760405161216791906135cd565b60006040518083038185875af1925050503d80600081146121a4576040519150601f19603f3d011682016040523d82523d6000602084013e6121a9565b606091505b50915091506121ba878383876129eb565b925050505b949350505050565b6000815160201461221a5760405162461bcd60e51b815260206004820152601760248201527f44617461206c656e677468206e6f7420636f727265637400000000000000000060448201526064016106d2565b60008280602001905181019061223091906135e9565b90507fffffffff80000000000000000000000000000000000000000000000000000000811280159061227e57507b7fffffffffffffffffffffffffffffffffffffffffffffffffffffff8113155b6115eb5760405162461bcd60e51b815260206004820152601760248201527f56616c7565207479706563617374696e67206572726f7200000000000000000060448201526064016106d2565b60008082516041036123005760208301516040840151606085015160001a6122f487828585612a64565b94509450505050612308565b506000905060025b9250929050565b600081600481111561232357612323613602565b0361232b5750565b600181600481111561233f5761233f613602565b0361238c5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106d2565b60028160048111156123a0576123a0613602565b036123ed5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106d2565b600381600481111561240157612401613602565b036124745760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106d2565b50565b805160098111156124ca5760405162461bcd60e51b815260206004820152601660248201527f417272617920746f6f206c6f6e6720746f20736f72740000000000000000000060448201526064016106d2565b60068110156125d5576004811015612524578060030361250f576124f18260006001612b28565b6124fe8260016002612b28565b61250b8260006001612b28565b5050565b8060020361250b5761250b8260006001612b28565b806005036125a1576125398260016002612b28565b6125468260036004612b28565b6125538260016003612b28565b6125608260006002612b28565b61256d8260026004612b28565b61257a8260006003612b28565b6125878260006001612b28565b6125948260026003612b28565b61250b8260016002612b28565b6125ae8260006001612b28565b6125bb8260026003612b28565b6125c88260016003612b28565b6125948260006002612b28565b600881101561275257806007036126b6576125f38260016002612b28565b6126008260036004612b28565b61260d8260056006612b28565b61261a8260006002612b28565b6126278260046006612b28565b6126348260036005612b28565b6126418260026006612b28565b61264e8260016005612b28565b61265b8260006004612b28565b6126688260026005612b28565b6126758260006003612b28565b6126828260026004612b28565b61268f8260016003612b28565b61269c8260006001612b28565b6126a98260026003612b28565b61250b8260046005612b28565b6126c38260006001612b28565b6126d08260026003612b28565b6126dd8260046005612b28565b6126ea8260016003612b28565b6126f78260036005612b28565b6127048260016003612b28565b6127118260026004612b28565b61271e8260006002612b28565b61272b8260026004612b28565b6127388260036004612b28565b6127458260016002612b28565b61250b8260026003612b28565b80600903612885576127678260016008612b28565b6127748260026007612b28565b6127818260036006612b28565b61278e8260046005612b28565b61279b8260016004612b28565b6127a88260056008612b28565b6127b58260006002612b28565b6127c28260066007612b28565b6127cf8260026006612b28565b6127dc8260076008612b28565b6127e98260006003612b28565b6127f68260046005612b28565b6128038260006001612b28565b6128108260036005612b28565b61281d8260066007612b28565b61282a8260026004612b28565b6128378260016003612b28565b6128448260056007612b28565b6128518260046006612b28565b61285e8260016002612b28565b61286b8260036004612b28565b6128788260056006612b28565b61269c8260076008612b28565b6128928260006007612b28565b61289f8260016006612b28565b6128ac8260026005612b28565b6128b98260036004612b28565b6128c68260006003612b28565b6128d38260046007612b28565b6128e08260016002612b28565b6128ed8260056006612b28565b6128fa8260006001612b28565b6129078260026003612b28565b6129148260046005612b28565b6129218260066007612b28565b61292e8260036005612b28565b61293b8260026004612b28565b6129488260016002612b28565b6129558260036004612b28565b6129628260056006612b28565b61296f8260026003612b28565b61297c8260046005612b28565b61250b8260036004612b28565b81516000908061299b5761299b6135b7565b6129ad84600060018403866000612bd6565b50949350505050565b81516000908190600181116129cd576129cd6135b7565b6129df85600060018403876001612bd6565b90969095509350505050565b60608315612a5a578251600003612a53576001600160a01b0385163b612a535760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106d2565b50816121bf565b6121bf8383612cac565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612a9b5750600090506003612b1f565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612aef573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612b1857600060019250925050612b1f565b9150600090505b94509492505050565b828181518110612b3a57612b3a6132c9565b6020026020010151838381518110612b5457612b546132c9565b60200260200101511315612bd157828181518110612b7457612b746132c9565b6020026020010151838381518110612b8e57612b8e6132c9565b6020026020010151848481518110612ba857612ba86132c9565b60200260200101858481518110612bc157612bc16132c9565b6020908102919091010191909152525b505050565b600080848603612beb57508290506000612ca2565b6000612bf8888888612cd6565b905080851015612c1b57612c13888860018403886000612bd6565b509250612c38565b80851115612c3457612c13888260010188886000612bd6565b8092505b8315612ca057875160018401925060028401905b80821015612c9d57898481518110612c6657612c666132c9565b60200260200101518a8381518110612c8057612c806132c9565b60200260200101511215612c92578193505b600190910190612c4c565b50505b505b9550959350505050565b815115612cbc5781518083602001fd5b8060405162461bcd60e51b81526004016106d291906130c6565b6000818303612ce65750816109ee565b6000848481518110612cfa57612cfa6132c9565b6020026020010151905060008490508360010192505b855160019091019081108015612d3e575081868281518110612d3457612d346132c9565b6020026020010151125b612d10575b82806001900393505081868481518110612d5f57612d5f6132c9565b602002602001015113612d4357828110612dea57858381518110612d8557612d856132c9565b6020026020010151868681518110612d9f57612d9f6132c9565b6020026020010151878781518110612db957612db96132c9565b60200260200101888681518110612dd257612dd26132c9565b602002602001018281525082815250505050506109ee565b858381518110612dfc57612dfc6132c9565b6020026020010151868281518110612e1657612e166132c9565b6020026020010151878381518110612e3057612e306132c9565b60200260200101888681518110612e4957612e496132c9565b602090810291909101019190915252612d10565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612e9c57612e9c612e5d565b604052919050565b60006020808385031215612eb757600080fd5b823567ffffffffffffffff80821115612ecf57600080fd5b818501915085601f830112612ee357600080fd5b813581811115612ef557612ef5612e5d565b8060051b9150612f06848301612e73565b8181529183018401918481019088841115612f2057600080fd5b938501935b83851015612f3e57843582529385019390850190612f25565b98975050505050505050565b60008083601f840112612f5c57600080fd5b50813567ffffffffffffffff811115612f7457600080fd5b6020830191508360208260051b850101111561230857600080fd5b60008060208385031215612fa257600080fd5b823567ffffffffffffffff811115612fb957600080fd5b6129df85828601612f4a565b60005b83811015612fe0578181015183820152602001612fc8565b50506000910152565b60008151808452613001816020860160208601612fc5565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b8481101561306057601f1986840301895261304e838351612fe9565b98840198925090830190600101613032565b5090979650505050505050565b604080825283519082018190526000906020906060840190828701845b828110156130a857815115158452928401929084019060010161308a565b505050838103828501526130bc8186613015565b9695505050505050565b6020815260006115e86020830184612fe9565b6001600160a01b038116811461247457600080fd5b60006020828403121561310057600080fd5b81356109ee816130d9565b60008083601f84011261311d57600080fd5b50813567ffffffffffffffff81111561313557600080fd5b60208301915083602082850101111561230857600080fd5b60008060006040848603121561316257600080fd5b833561316d816130d9565b9250602084013567ffffffffffffffff81111561318957600080fd5b6131958682870161310b565b9497909650939450505050565b600080604083850312156131b557600080fd5b50508035926020909101359150565b6000602082840312156131d657600080fd5b5035919050565b6000806000604084860312156131f257600080fd5b83359250602084013567ffffffffffffffff81111561321057600080fd5b61319586828701612f4a565b6020815260006115e86020830184613015565b63ffffffff8116811461247457600080fd5b6000806000806060858703121561325757600080fd5b8435935060208501356132698161322f565b9250604085013567ffffffffffffffff81111561328557600080fd5b6132918782880161310b565b95989497509550505050565b600080604083850312156132b057600080fd5b82356132bb816130d9565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126132f657600080fd5b83018035915067ffffffffffffffff82111561331157600080fd5b60200191503681900382131561230857600080fd5b8183823760009101908152919050565b600181811c9082168061334a57607f821691505b6020821081036120cd57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156115eb576115eb61336a565b6000602082840312156133a557600080fd5b815180151581146109ee57600080fd5b6020808252825182820181905260009190848201906040850190845b818110156133ed578351835292840192918401916001016133d1565b50909695505050505050565b600082601f83011261340a57600080fd5b813567ffffffffffffffff81111561342457613424612e5d565b613437601f8201601f1916602001612e73565b81815284602083860101111561344c57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561348157600080fd5b853561348c816130d9565b94506020860135935060408601359250606086013567ffffffffffffffff808211156134b757600080fd5b6134c389838a016133f9565b935060808801359150808211156134d957600080fd5b506134e6888289016133f9565b9150509295509295909350565b83815282602082015260008251613511816040850160208701612fc5565b91909101604001949350505050565b6000806040838503121561353357600080fd5b825180601b0b811461354457600080fd5b60208401519092506135558161322f565b809150509250929050565b6000600182016135725761357261336a565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261359e5761359e613579565b500690565b6000826135b2576135b2613579565b500490565b634e487b7160e01b600052600160045260246000fd5b600082516135df818460208701612fc5565b9190910192915050565b6000602082840312156135fb57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220f6c2716976bfc2991386e282460b045d2925c05d1abc5c12230a67229925021864736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101945760003560e01c806359e5c6b9116100e1578063ac9650d81161008a578063f1939bd011610064578063f1939bd014610589578063f3fef3a3146105d2578063f7729409146105f2578063f8b2cb4f1461061257600080fd5b8063ac9650d814610513578063db2da59714610540578063e8597c371461055557600080fd5b806391526c36116100bb57806391526c361461042757806396bb5dbd146104665780639f416522146104cf57600080fd5b806359e5c6b9146103ab5780635ae64712146103cb578063796b89b91461041457600080fd5b806342cbb15c116101435780634c8f1d8d1161011d5780634c8f1d8d1461033c5780634dcc19fe1461035e5780635989eaeb1461037157600080fd5b806342cbb15c146102c7578063437b9116146102da578063481c6a751461030857600080fd5b80631ce9ae07116101745780631ce9ae07146102345780632d6a744e146102805780633408e470146102b457600080fd5b80629f2f3c14610199578062aae33f146101e05780631be8d01f14610200575b600080fd5b3480156101a557600080fd5b506101cd7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b3480156101ec57600080fd5b506101cd6101fb366004612ea4565b61063a565b34801561020c57600080fd5b506101cd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561024057600080fd5b506102687f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101d7565b34801561028c57600080fd5b506102687f000000000000000000000000000000000000000000000000000000000000000081565b3480156102c057600080fd5b50466101cd565b3480156102d357600080fd5b50436101cd565b3480156102e657600080fd5b506102fa6102f5366004612f8f565b610767565b6040516101d792919061306d565b34801561031457600080fd5b506102687f000000000000000000000000000000000000000000000000000000000000000081565b34801561034857600080fd5b506103516108cd565b6040516101d791906130c6565b34801561036a57600080fd5b50486101cd565b34801561037d57600080fd5b5061039b61038c3660046130ee565b6001600160a01b03163b151590565b60405190151581526020016101d7565b3480156103b757600080fd5b506103516103c636600461314d565b61095b565b3480156103d757600080fd5b506103516040518060400160405280600a81526020017f41756374696f6e6565720000000000000000000000000000000000000000000081525081565b34801561042057600080fd5b50426101cd565b34801561043357600080fd5b506104476104423660046131a2565b6109f5565b60408051601b9390930b835263ffffffff9091166020830152016101d7565b34801561047257600080fd5b506104ab6104813660046131c4565b6002602052600090815260409020546001600160a01b03811690600160a01b900463ffffffff1682565b604080516001600160a01b03909316835263ffffffff9091166020830152016101d7565b3480156104db57600080fd5b506104ef6104ea3660046131dd565b610a5d565b60408051938452601b9290920b602084015263ffffffff16908201526060016101d7565b34801561051f57600080fd5b5061053361052e366004612f8f565b610b43565b6040516101d7919061321c565b61055361054e366004613241565b610cc4565b005b34801561056157600080fd5b506101cd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561059557600080fd5b506103516040518060400160405280600a81526020017f576974686472617765720000000000000000000000000000000000000000000081525081565b3480156105de57600080fd5b506105536105ed36600461329d565b6110a1565b3480156105fe57600080fd5b506104ef61060d3660046131dd565b611363565b34801561061e57600080fd5b506101cd61062d3660046130ee565b6001600160a01b03163190565b6000806000610648846113d2565b9150915061065584611574565b600081815260016020526040902080549194509063ffffffff808416600160e01b90920416036106db578054601b84810b91900b036106db5760405162461bcd60e51b815260206004820152601a60248201527f446f6573206e6f742075706461746520426561636f6e2073657400000000000060448201526064015b60405180910390fd5b604080518082018252601b85900b80825263ffffffff858116602080850182815260008b81526001835287902095519051909316600160e01b026001600160e01b0390931692909217909355835191825281019190915285917fb7712be6248d021e8c56ac9613c09491354a4d0f4ad0b7db1a664b35be4b2349910160405180910390a2505050919050565b606080828067ffffffffffffffff81111561078457610784612e5d565b6040519080825280602002602001820160405280156107ad578160200160208202803683370190505b5092508067ffffffffffffffff8111156107c9576107c9612e5d565b6040519080825280602002602001820160405280156107fc57816020015b60608152602001906001900390816107e75790505b50915060005b818110156108c4573086868381811061081d5761081d6132c9565b905060200281019061082f91906132df565b60405161083d929190613326565b600060405180830381855af49150503d8060008114610878576040519150601f19603f3d011682016040523d82523d6000602084013e61087d565b606091505b50858381518110610890576108906132c9565b602002602001018584815181106108a9576108a96132c9565b60209081029190910101919091529015159052600101610802565b50509250929050565b600080546108da90613336565b80601f016020809104026020016040519081016040528092919081815260200182805461090690613336565b80156109535780601f1061092857610100808354040283529160200191610953565b820191906000526020600020905b81548152906001019060200180831161093657829003601f168201915b505050505081565b606033156109ab5760405162461bcd60e51b815260206004820152601760248201527f53656e6465722061646472657373206e6f74207a65726f00000000000000000060448201526064016106d2565b6109eb8484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115a492505050565b90505b9392505050565b6000806000600160008686604051602001610a1a929190918252602082015260400190565b60408051808303601f1901815291815281516020928301208352908201929092520160002054601b81900b96600160e01b90910463ffffffff1695509350505050565b60008381526002602052604081208054829182916001600160a01b03163314610ac85760405162461bcd60e51b815260206004820152601b60248201527f53656e646572206e6f74206c617374206269642075706461746572000000000060448201526064016106d2565b8054610ae4908890600160a01b900463ffffffff1688886115f1565b60408051848152601b84900b602082015263ffffffff83168183015290519397509195509350339189917ff775a9e1e1719e1dfecea2021e4b9861ac4d02846df440c4cba17e3ce855f913919081900360600190a35093509350939050565b6060818067ffffffffffffffff811115610b5f57610b5f612e5d565b604051908082528060200260200182016040528015610b9257816020015b6060815260200190600190039081610b7d5790505b50915060005b81811015610cbc57600030868684818110610bb557610bb56132c9565b9050602002810190610bc791906132df565b604051610bd5929190613326565b600060405180830381855af49150503d8060008114610c10576040519150601f19603f3d011682016040523d82523d6000602084013e610c15565b606091505b50858481518110610c2857610c286132c9565b6020908102919091010152905080610cb3576000848381518110610c4e57610c4e6132c9565b60200260200101519050600081511115610c6b5780518082602001fd5b60405162461bcd60e51b815260206004820152601b60248201527f4d756c746963616c6c3a204e6f2072657665727420737472696e67000000000060448201526064016106d2565b50600101610b98565b505092915050565b83600003610d145760405162461bcd60e51b815260206004820152600c60248201527f64417070204944207a65726f000000000000000000000000000000000000000060448201526064016106d2565b8263ffffffff16600003610d6a5760405162461bcd60e51b815260206004820152600c60248201527f4375742d6f6666207a65726f000000000000000000000000000000000000000060448201526064016106d2565b610d7642610e10613380565b8363ffffffff1610610dca5760405162461bcd60e51b815260206004820152601d60248201527f4375742d6f666620746f6f2066617220696e207468652066757475726500000060448201526064016106d2565b6000610e8a83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080514660208201529081018a905233606090811b6bffffffffffffffffffffffff19169082015234607482015260e089901b7fffffffff00000000000000000000000000000000000000000000000000000000166094820152610e84925060980190505b60405160208183030381529060405280519060200120611f22565b90611f5d565b604051632474521560e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0380831660248301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906391d1485490604401602060405180830381865afa158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f9190613393565b610f805760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016106d2565b60008581526002602052604090205463ffffffff808616600160a01b9092041610610fed5760405162461bcd60e51b815260206004820152601760248201527f4375742d6f6666206e6f74206d6f726520726563656e7400000000000000000060448201526064016106d2565b6040805180820182523380825263ffffffff878116602080850182815260008c815260028352879020955186549151909416600160a01b027fffffffffffffffff0000000000000000000000000000000000000000000000009091166001600160a01b03948516171790945584513481529384015284169282019290925286907f39b24cbe33ddb28dc22abcbaf14bf7f5544cc9c886c49dbb2f0d30e9dd1448949060600160405180910390a35050505050565b6001600160a01b0382166110f75760405162461bcd60e51b815260206004820152601660248201527f526563697069656e742061646472657373207a65726f0000000000000000000060448201526064016106d2565b806000036111475760405162461bcd60e51b815260206004820152600b60248201527f416d6f756e74207a65726f00000000000000000000000000000000000000000060448201526064016106d2565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806112275750604051632474521560e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa158015611203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112279190613393565b6112735760405162461bcd60e51b815260206004820152601660248201527f53656e6465722063616e6e6f742077697468647261770000000000000000000060448201526064016106d2565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146112c0576040519150601f19603f3d011682016040523d82523d6000602084013e6112c5565b606091505b50509050806113165760405162461bcd60e51b815260206004820152601360248201527f5769746864726177616c2072657665727465640000000000000000000000000060448201526064016106d2565b604080516001600160a01b038516815260208101849052338183015290517fff79f55e9fae054ff094d9e06f631119716d818f9f8ea9b5b2adf5679f6c12e09181900360600190a1505050565b6000808033156113b55760405162461bcd60e51b815260206004820152601760248201527f53656e6465722061646472657373206e6f74207a65726f00000000000000000060448201526064016106d2565b6113c38660001987876115f1565b91989097509095509350505050565b80516000908190600181116114295760405162461bcd60e51b815260206004820152601f60248201527f537065636966696564206c657373207468616e2074776f20426561636f6e730060448201526064016106d2565b60008167ffffffffffffffff81111561144457611444612e5d565b60405190808252806020026020018201604052801561146d578160200160208202803683370190505b50905060008267ffffffffffffffff81111561148b5761148b612e5d565b6040519080825280602002602001820160405280156114b4578160200160208202803683370190505b50905060005b83811015611555576000600160008984815181106114da576114da6132c9565b602090810291909101810151825281019190915260400160002080548551919250601b0b90859084908110611511576115116132c9565b602090810291909101015280548351600160e01b90910463ffffffff1690849084908110611541576115416132c9565b6020908102919091010152506001016114ba565b5061155f82611f81565b945061156a81611f81565b9350505050915091565b60008160405160200161158791906133b5565b604051602081830303815290604052805190602001209050919050565b60606115e8838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506120d3565b90505b92915050565b6000808083806116435760405162461bcd60e51b815260206004820152601160248201527f5369676e6564206461746120656d70747900000000000000000000000000000060448201526064016106d2565b806001036118c75760008060008060008a8a6000818110611666576116666132c9565b905060200281019061167891906132df565b8101906116859190613469565b945094509450945094506116db85856040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b985060008d8a6040516020016116fb929190918252602082015260400190565b604051602081830303815290604052805190602001209050856001600160a01b031661176183610e848860405160200161173791815260200190565b604051602081830303815290604052805190602001208888604051602001610e69939291906134f3565b6001600160a01b0316146117ac5760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016106d2565b8c8411156117fc5760405162461bcd60e51b815260206004820152601960248201527f54696d657374616d702065786365656473206375742d6f66660000000000000060448201526064016106d2565b600081815260016020526040902054600160e01b900463ffffffff1684116118665760405162461bcd60e51b815260206004820152601960248201527f446f6573206e6f74207570646174652074696d657374616d700000000000000060448201526064016106d2565b61186f836121c7565b604080518082018252601b83900b815263ffffffff80881660208084019182526000968752600190529290942090519151909316600160e01b026001600160e01b03909116179091559750919550611f179350505050565b60008167ffffffffffffffff8111156118e2576118e2612e5d565b60405190808252806020026020018201604052801561190b578160200160208202803683370190505b50905060008267ffffffffffffffff81111561192957611929612e5d565b604051908082528060200260200182016040528015611952578160200160208202803683370190505b50905060005b83811015611dfc5760008060008060008d8d8781811061197a5761197a6132c9565b905060200281019061198c91906132df565b8101906119999190613469565b945094509450945094506119ef85856040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b888781518110611a0157611a016132c9565b6020026020010181815250508f888781518110611a2057611a206132c9565b6020026020010151604051602001611a42929190918252602082015260400190565b60405160208183030381529060405280519060200120878781518110611a6a57611a6a6132c9565b6020908102919091010152805115611c6d57846001600160a01b0316611aca82610e8487604051602001611aa091815260200190565b604051602081830303815290604052805190602001208787604051602001610e69939291906134f3565b6001600160a01b031614611b155760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016106d2565b8e831115611b655760405162461bcd60e51b815260206004820152601960248201527f54696d657374616d702065786365656473206375742d6f66660000000000000060448201526064016106d2565b60016000888881518110611b7b57611b7b6132c9565b602090810291909101810151825281019190915260400160002054600160e01b900463ffffffff168311611bf15760405162461bcd60e51b815260206004820152601960248201527f446f6573206e6f74207570646174652074696d657374616d700000000000000060448201526064016106d2565b6040518060400160405280611c05846121c7565b601b0b81526020018463ffffffff1681525060016000898981518110611c2d57611c2d6132c9565b6020908102919091018101518252818101929092526040016000208251929091015163ffffffff16600160e01b026001600160e01b039092169190911790555b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166367a7cfb78b8a81518110611cb157611cb16132c9565b60200260200101516040518263ffffffff1660e01b8152600401611cd791815260200190565b6040805180830381865afa158015611cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d179190613520565b91509150600160008a8a81518110611d3157611d316132c9565b60200260200101518152602001908152602001600020600001601c9054906101000a900463ffffffff1663ffffffff168163ffffffff161115611de257604051806040016040528083601b0b81526020018263ffffffff16815250600160008b8b81518110611da257611da26132c9565b6020908102919091018101518252818101929092526040016000208251929091015163ffffffff16600160e01b026001600160e01b039092169190911790555b505050505050508080611df490613560565b915050611958565b50611e0682611574565b9550611e11816113d2565b909550935060008a611e2284611574565b60408051602081019390935282015260600160408051601f19818403018152918152815160209283012060008181526001909352912080549192509063ffffffff808816600160e01b9092041603611ecb578054601b88810b91900b03611ecb5760405162461bcd60e51b815260206004820152601a60248201527f446f6573206e6f742075706461746520426561636f6e2073657400000000000060448201526064016106d2565b50604080518082018252601b88900b815263ffffffff80881660208084019182526000958652600190529290932090519151909216600160e01b026001600160e01b0390911617905550505b509450945094915050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01611587565b6000806000611f6c85856122ca565b91509150611f798161230f565b509392505050565b80516000906009811161205357611f9783612477565b611fa260028261358f565b600103611fd55782611fb56002836135a3565b81518110611fc557611fc56132c9565b6020026020010151915050919050565b80600003611fe557611fe56135b7565b6109ee836001600284040381518110612000576120006132c9565b6020026020010151846002848161201957612019613579565b048151811061202a5761202a6132c9565b6020026020010151600182811d82821d01838316919091160160ff81901c838318160192915050565b61205e60028261358f565b60010361207a5782611fb5816120756002856135a3565b612989565b60008061208d85600160028604036129b6565b80925081935050506120c48583815181106120aa576120aa6132c9565b602002602001015186838151811061202a5761202a6132c9565b95945050505050565b50919050565b60608247101561214b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016106d2565b600080866001600160a01b0316858760405161216791906135cd565b60006040518083038185875af1925050503d80600081146121a4576040519150601f19603f3d011682016040523d82523d6000602084013e6121a9565b606091505b50915091506121ba878383876129eb565b925050505b949350505050565b6000815160201461221a5760405162461bcd60e51b815260206004820152601760248201527f44617461206c656e677468206e6f7420636f727265637400000000000000000060448201526064016106d2565b60008280602001905181019061223091906135e9565b90507fffffffff80000000000000000000000000000000000000000000000000000000811280159061227e57507b7fffffffffffffffffffffffffffffffffffffffffffffffffffffff8113155b6115eb5760405162461bcd60e51b815260206004820152601760248201527f56616c7565207479706563617374696e67206572726f7200000000000000000060448201526064016106d2565b60008082516041036123005760208301516040840151606085015160001a6122f487828585612a64565b94509450505050612308565b506000905060025b9250929050565b600081600481111561232357612323613602565b0361232b5750565b600181600481111561233f5761233f613602565b0361238c5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106d2565b60028160048111156123a0576123a0613602565b036123ed5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106d2565b600381600481111561240157612401613602565b036124745760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106d2565b50565b805160098111156124ca5760405162461bcd60e51b815260206004820152601660248201527f417272617920746f6f206c6f6e6720746f20736f72740000000000000000000060448201526064016106d2565b60068110156125d5576004811015612524578060030361250f576124f18260006001612b28565b6124fe8260016002612b28565b61250b8260006001612b28565b5050565b8060020361250b5761250b8260006001612b28565b806005036125a1576125398260016002612b28565b6125468260036004612b28565b6125538260016003612b28565b6125608260006002612b28565b61256d8260026004612b28565b61257a8260006003612b28565b6125878260006001612b28565b6125948260026003612b28565b61250b8260016002612b28565b6125ae8260006001612b28565b6125bb8260026003612b28565b6125c88260016003612b28565b6125948260006002612b28565b600881101561275257806007036126b6576125f38260016002612b28565b6126008260036004612b28565b61260d8260056006612b28565b61261a8260006002612b28565b6126278260046006612b28565b6126348260036005612b28565b6126418260026006612b28565b61264e8260016005612b28565b61265b8260006004612b28565b6126688260026005612b28565b6126758260006003612b28565b6126828260026004612b28565b61268f8260016003612b28565b61269c8260006001612b28565b6126a98260026003612b28565b61250b8260046005612b28565b6126c38260006001612b28565b6126d08260026003612b28565b6126dd8260046005612b28565b6126ea8260016003612b28565b6126f78260036005612b28565b6127048260016003612b28565b6127118260026004612b28565b61271e8260006002612b28565b61272b8260026004612b28565b6127388260036004612b28565b6127458260016002612b28565b61250b8260026003612b28565b80600903612885576127678260016008612b28565b6127748260026007612b28565b6127818260036006612b28565b61278e8260046005612b28565b61279b8260016004612b28565b6127a88260056008612b28565b6127b58260006002612b28565b6127c28260066007612b28565b6127cf8260026006612b28565b6127dc8260076008612b28565b6127e98260006003612b28565b6127f68260046005612b28565b6128038260006001612b28565b6128108260036005612b28565b61281d8260066007612b28565b61282a8260026004612b28565b6128378260016003612b28565b6128448260056007612b28565b6128518260046006612b28565b61285e8260016002612b28565b61286b8260036004612b28565b6128788260056006612b28565b61269c8260076008612b28565b6128928260006007612b28565b61289f8260016006612b28565b6128ac8260026005612b28565b6128b98260036004612b28565b6128c68260006003612b28565b6128d38260046007612b28565b6128e08260016002612b28565b6128ed8260056006612b28565b6128fa8260006001612b28565b6129078260026003612b28565b6129148260046005612b28565b6129218260066007612b28565b61292e8260036005612b28565b61293b8260026004612b28565b6129488260016002612b28565b6129558260036004612b28565b6129628260056006612b28565b61296f8260026003612b28565b61297c8260046005612b28565b61250b8260036004612b28565b81516000908061299b5761299b6135b7565b6129ad84600060018403866000612bd6565b50949350505050565b81516000908190600181116129cd576129cd6135b7565b6129df85600060018403876001612bd6565b90969095509350505050565b60608315612a5a578251600003612a53576001600160a01b0385163b612a535760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106d2565b50816121bf565b6121bf8383612cac565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612a9b5750600090506003612b1f565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612aef573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612b1857600060019250925050612b1f565b9150600090505b94509492505050565b828181518110612b3a57612b3a6132c9565b6020026020010151838381518110612b5457612b546132c9565b60200260200101511315612bd157828181518110612b7457612b746132c9565b6020026020010151838381518110612b8e57612b8e6132c9565b6020026020010151848481518110612ba857612ba86132c9565b60200260200101858481518110612bc157612bc16132c9565b6020908102919091010191909152525b505050565b600080848603612beb57508290506000612ca2565b6000612bf8888888612cd6565b905080851015612c1b57612c13888860018403886000612bd6565b509250612c38565b80851115612c3457612c13888260010188886000612bd6565b8092505b8315612ca057875160018401925060028401905b80821015612c9d57898481518110612c6657612c666132c9565b60200260200101518a8381518110612c8057612c806132c9565b60200260200101511215612c92578193505b600190910190612c4c565b50505b505b9550959350505050565b815115612cbc5781518083602001fd5b8060405162461bcd60e51b81526004016106d291906130c6565b6000818303612ce65750816109ee565b6000848481518110612cfa57612cfa6132c9565b6020026020010151905060008490508360010192505b855160019091019081108015612d3e575081868281518110612d3457612d346132c9565b6020026020010151125b612d10575b82806001900393505081868481518110612d5f57612d5f6132c9565b602002602001015113612d4357828110612dea57858381518110612d8557612d856132c9565b6020026020010151868681518110612d9f57612d9f6132c9565b6020026020010151878781518110612db957612db96132c9565b60200260200101888681518110612dd257612dd26132c9565b602002602001018281525082815250505050506109ee565b858381518110612dfc57612dfc6132c9565b6020026020010151868281518110612e1657612e166132c9565b6020026020010151878381518110612e3057612e306132c9565b60200260200101888681518110612e4957612e496132c9565b602090810291909101019190915252612d10565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612e9c57612e9c612e5d565b604052919050565b60006020808385031215612eb757600080fd5b823567ffffffffffffffff80821115612ecf57600080fd5b818501915085601f830112612ee357600080fd5b813581811115612ef557612ef5612e5d565b8060051b9150612f06848301612e73565b8181529183018401918481019088841115612f2057600080fd5b938501935b83851015612f3e57843582529385019390850190612f25565b98975050505050505050565b60008083601f840112612f5c57600080fd5b50813567ffffffffffffffff811115612f7457600080fd5b6020830191508360208260051b850101111561230857600080fd5b60008060208385031215612fa257600080fd5b823567ffffffffffffffff811115612fb957600080fd5b6129df85828601612f4a565b60005b83811015612fe0578181015183820152602001612fc8565b50506000910152565b60008151808452613001816020860160208601612fc5565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b8481101561306057601f1986840301895261304e838351612fe9565b98840198925090830190600101613032565b5090979650505050505050565b604080825283519082018190526000906020906060840190828701845b828110156130a857815115158452928401929084019060010161308a565b505050838103828501526130bc8186613015565b9695505050505050565b6020815260006115e86020830184612fe9565b6001600160a01b038116811461247457600080fd5b60006020828403121561310057600080fd5b81356109ee816130d9565b60008083601f84011261311d57600080fd5b50813567ffffffffffffffff81111561313557600080fd5b60208301915083602082850101111561230857600080fd5b60008060006040848603121561316257600080fd5b833561316d816130d9565b9250602084013567ffffffffffffffff81111561318957600080fd5b6131958682870161310b565b9497909650939450505050565b600080604083850312156131b557600080fd5b50508035926020909101359150565b6000602082840312156131d657600080fd5b5035919050565b6000806000604084860312156131f257600080fd5b83359250602084013567ffffffffffffffff81111561321057600080fd5b61319586828701612f4a565b6020815260006115e86020830184613015565b63ffffffff8116811461247457600080fd5b6000806000806060858703121561325757600080fd5b8435935060208501356132698161322f565b9250604085013567ffffffffffffffff81111561328557600080fd5b6132918782880161310b565b95989497509550505050565b600080604083850312156132b057600080fd5b82356132bb816130d9565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126132f657600080fd5b83018035915067ffffffffffffffff82111561331157600080fd5b60200191503681900382131561230857600080fd5b8183823760009101908152919050565b600181811c9082168061334a57607f821691505b6020821081036120cd57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156115eb576115eb61336a565b6000602082840312156133a557600080fd5b815180151581146109ee57600080fd5b6020808252825182820181905260009190848201906040850190845b818110156133ed578351835292840192918401916001016133d1565b50909695505050505050565b600082601f83011261340a57600080fd5b813567ffffffffffffffff81111561342457613424612e5d565b613437601f8201601f1916602001612e73565b81815284602083860101111561344c57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561348157600080fd5b853561348c816130d9565b94506020860135935060408601359250606086013567ffffffffffffffff808211156134b757600080fd5b6134c389838a016133f9565b935060808801359150808211156134d957600080fd5b506134e6888289016133f9565b9150509295509295909350565b83815282602082015260008251613511816040850160208701612fc5565b91909101604001949350505050565b6000806040838503121561353357600080fd5b825180601b0b811461354457600080fd5b60208401519092506135558161322f565b809150509250929050565b6000600182016135725761357261336a565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261359e5761359e613579565b500690565b6000826135b2576135b2613579565b500490565b634e487b7160e01b600052600160045260246000fd5b600082516135df818460208701612fc5565b9190910192915050565b6000602082840312156135fb57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220f6c2716976bfc2991386e282460b045d2925c05d1abc5c12230a67229925021864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "accessControlRegistry_": "AccessControlRegistry contract address",
          "adminRoleDescription_": "Admin role description",
          "api3ServerV1_": "Api3ServerV1 address",
          "manager_": "Manager address"
        }
      },
      "containsBytecode(address)": {
        "details": "An account not containing any bytecode does not indicate that it is an EOA or it will not contain any bytecode in the future. Contract construction and `SELFDESTRUCT` updates the bytecode at the end of the transaction.",
        "returns": {
          "_0": "If the account contains bytecode"
        }
      },
      "getBalance(address)": {
        "params": {
          "account": "Account address"
        },
        "returns": {
          "_0": "Account balance"
        }
      },
      "getBlockBasefee()": {
        "returns": {
          "_0": "Current block basefee"
        }
      },
      "getBlockNumber()": {
        "returns": {
          "_0": "Current block number"
        }
      },
      "getBlockTimestamp()": {
        "returns": {
          "_0": "Current block timestamp"
        }
      },
      "getChainId()": {
        "returns": {
          "_0": "Chain ID"
        }
      },
      "multicall(bytes[])": {
        "params": {
          "data": "Array of calldata of batched calls"
        },
        "returns": {
          "returndata": "Array of returndata of batched calls"
        }
      },
      "oevDataFeed(uint256,bytes32)": {
        "params": {
          "dappId": "dApp ID",
          "dataFeedId": "Data feed ID"
        },
        "returns": {
          "timestamp": "Data feed timestamp",
          "value": "Data feed value"
        }
      },
      "payOevBid(uint256,uint32,bytes)": {
        "params": {
          "dappId": "dApp ID",
          "signature": "Signature provided by an auctioneer",
          "signedDataTimestampCutoff": "Signed data timestamp cut-off"
        }
      },
      "simulateDappOevDataFeedUpdate(uint256,bytes[])": {
        "details": "The intended flow is for a searcher to do a static multicall to this function and `simulateExternalCall()` to check if the current signed data lets them extract OEV. If so, the searcher stores this data and places a bid on OevAuctionHouse. If they win the auction, they pay the bid and use the stored signed data with `updateDappOevDataFeed()` to extract OEV.",
        "params": {
          "dappId": "dApp ID",
          "signedData": "Signed data (see `_updateDappOevDataFeed()` for details)"
        },
        "returns": {
          "baseDataFeedId": "Base data feed ID",
          "updatedTimestamp": "Updated timestamp",
          "updatedValue": "Updated value"
        }
      },
      "simulateExternalCall(address,bytes)": {
        "details": "The most basic usage of this is in a static multicall that calls `simulateDappOevDataFeedUpdate()` multiple times to update the relevant feeds, followed by an external call to the liquidator contract of the searcher, which is built to return the revenue from the liquidation. The returned value would then be used to determine the bid amount.",
        "params": {
          "data": "Calldata of the external call",
          "target": "Target address of the external call"
        },
        "returns": {
          "_0": "Returndata of the external call"
        }
      },
      "tryMulticall(bytes[])": {
        "params": {
          "data": "Array of calldata of batched calls"
        },
        "returns": {
          "returndata": "Array of returndata of batched calls",
          "successes": "Array of success conditions of batched calls"
        }
      },
      "updateBeaconSetWithBeacons(bytes32[])": {
        "details": "As an oddity, this function still works if some of the IDs in `beaconIds` belong to Beacon sets rather than Beacons. This can be used to implement hierarchical Beacon sets.",
        "params": {
          "beaconIds": "Beacon IDs"
        },
        "returns": {
          "beaconSetId": "Beacon set ID"
        }
      },
      "updateDappOevDataFeed(uint256,bytes[])": {
        "params": {
          "dappId": "dApp ID",
          "signedData": "Signed data (see `_updateDappOevDataFeed()` for details)"
        },
        "returns": {
          "baseDataFeedId": "Base data feed ID",
          "updatedTimestamp": "Updated timestamp",
          "updatedValue": "Updated value"
        }
      },
      "withdraw(address,uint256)": {
        "params": {
          "amount": "Amount",
          "recipient": "Recipient address"
        }
      }
    },
    "title": "Api3ServerV1 extension for OEV support",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "AUCTIONEER_ROLE_DESCRIPTION()": {
        "notice": "Auctioneer role description"
      },
      "WITHDRAWER_ROLE_DESCRIPTION()": {
        "notice": "Withdrawer role description"
      },
      "accessControlRegistry()": {
        "notice": "AccessControlRegistry contract address"
      },
      "adminRole()": {
        "notice": "Admin role"
      },
      "adminRoleDescription()": {
        "notice": "Admin role description"
      },
      "api3ServerV1()": {
        "notice": "Api3ServerV1 contract address"
      },
      "auctioneerRole()": {
        "notice": "Auctioneer role"
      },
      "containsBytecode(address)": {
        "notice": "Returns if the account contains bytecode"
      },
      "dappIdToLastPaidBid(uint256)": {
        "notice": "Returns the parameters of the last paid bid for the dApp with ID"
      },
      "getBalance(address)": {
        "notice": "Returns the account balance"
      },
      "getBlockBasefee()": {
        "notice": "Returns the current block basefee"
      },
      "getBlockNumber()": {
        "notice": "Returns the current block number"
      },
      "getBlockTimestamp()": {
        "notice": "Returns the current block timestamp"
      },
      "getChainId()": {
        "notice": "Returns the chain ID"
      },
      "manager()": {
        "notice": "Address of the manager that manages the related AccessControlRegistry roles"
      },
      "multicall(bytes[])": {
        "notice": "Batches calls to the inheriting contract and reverts as soon as one of the batched calls reverts"
      },
      "oevDataFeed(uint256,bytes32)": {
        "notice": "Value of the OEV data feed specific to the dApp, intended for informational purposes. The dApps are strongly recommended to use the standardized proxies to read data feeds."
      },
      "payOevBid(uint256,uint32,bytes)": {
        "notice": "An OEV auction bid specifies a dApp ID, a signed data timestamp cut-off, a bid amount and an updater account. To award the winning bid, an auctioneer signs a message that includes the hash of these parameters and publishes it. Then, the updater account calls this function to pay the bid amount and claim the privilege to execute updates for the dApp with ID using the signed data whose timestamps are limited by the cut-off."
      },
      "simulateDappOevDataFeedUpdate(uint256,bytes[])": {
        "notice": "Called by the zero address to simulate an OEV data feed update"
      },
      "simulateExternalCall(address,bytes)": {
        "notice": "Called by the zero address to simulate an external call"
      },
      "tryMulticall(bytes[])": {
        "notice": "Batches calls to the inheriting contract but does not revert if any of the batched calls reverts"
      },
      "updateBeaconSetWithBeacons(bytes32[])": {
        "notice": "Updates the Beacon set using the current values of its Beacons"
      },
      "updateDappOevDataFeed(uint256,bytes[])": {
        "notice": "Called by the current updater of the dApp with ID to update the OEV data feed specific to the dApp"
      },
      "withdraw(address,uint256)": {
        "notice": "Called by the contract manager or a withdrawer to withdraw the accumulated OEV auction proceeds"
      },
      "withdrawerRole()": {
        "notice": "Withdrawer role"
      }
    },
    "notice": "Api3ServerV1 contract supports base data feeds and OEV functionality. This contract implements the updated OEV design, and thus supersedes the OEV-related portion of Api3ServerV1. As before, the users are intended to read API3 data feeds through a standardized proxy, which abstracts this change away.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20,
        "contract": "contracts/api3-server-v1/Api3ServerV1OevExtension.sol:Api3ServerV1OevExtension",
        "label": "adminRoleDescription",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1123,
        "contract": "contracts/api3-server-v1/Api3ServerV1OevExtension.sol:Api3ServerV1OevExtension",
        "label": "_dataFeeds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(DataFeed)1117_storage)"
      },
      {
        "astId": 332,
        "contract": "contracts/api3-server-v1/Api3ServerV1OevExtension.sol:Api3ServerV1OevExtension",
        "label": "dappIdToLastPaidBid",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(LastPaidBid)303_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int224": {
        "encoding": "inplace",
        "label": "int224",
        "numberOfBytes": "28"
      },
      "t_mapping(t_bytes32,t_struct(DataFeed)1117_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DataFeedServer.DataFeed)",
        "numberOfBytes": "32",
        "value": "t_struct(DataFeed)1117_storage"
      },
      "t_mapping(t_uint256,t_struct(LastPaidBid)303_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Api3ServerV1OevExtension.LastPaidBid)",
        "numberOfBytes": "32",
        "value": "t_struct(LastPaidBid)303_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DataFeed)1117_storage": {
        "encoding": "inplace",
        "label": "struct DataFeedServer.DataFeed",
        "members": [
          {
            "astId": 1114,
            "contract": "contracts/api3-server-v1/Api3ServerV1OevExtension.sol:Api3ServerV1OevExtension",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_int224"
          },
          {
            "astId": 1116,
            "contract": "contracts/api3-server-v1/Api3ServerV1OevExtension.sol:Api3ServerV1OevExtension",
            "label": "timestamp",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(LastPaidBid)303_storage": {
        "encoding": "inplace",
        "label": "struct Api3ServerV1OevExtension.LastPaidBid",
        "members": [
          {
            "astId": 300,
            "contract": "contracts/api3-server-v1/Api3ServerV1OevExtension.sol:Api3ServerV1OevExtension",
            "label": "updater",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 302,
            "contract": "contracts/api3-server-v1/Api3ServerV1OevExtension.sol:Api3ServerV1OevExtension",
            "label": "signedDataTimestampCutoff",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}